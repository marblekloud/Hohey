{"ast":null,"code":"var _jsxFileName = \"/Users/kelvinho/Documents/Coding/HoHey-main 4 2/hoheywebsite/client/src/contexts/Web3.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport React, { createContext, useContext, useEffect, useMemo, useReducer } from \"react\";\nimport { subscribeToAccount, subscribeToNetId } from \"../api/web3\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst INITIAL_STATE = {\n  account: \"\",\n  web3: null,\n  netId: 0\n};\nconst UPDATE_ACCOUNT = \"UPDATE_ACCOUNT\";\nconst UPDATE_NET_ID = \"UPDATE_NET_ID\";\n\nfunction reducer(state = INITIAL_STATE, action) {\n  switch (action.type) {\n    case UPDATE_ACCOUNT:\n      {\n        const web3 = action.web3 || state.web3;\n        const {\n          account\n        } = action;\n        return { ...state,\n          web3,\n          account\n        };\n      }\n\n    case UPDATE_NET_ID:\n      {\n        const {\n          netId\n        } = action;\n        return { ...state,\n          netId\n        };\n      }\n\n    default:\n      return state;\n  }\n}\n\nconst Web3Context = /*#__PURE__*/createContext({\n  state: INITIAL_STATE,\n  updateAccount: _data => {},\n  updateNetId: _data => {}\n});\nexport function useWeb3Context() {\n  _s();\n\n  return useContext(Web3Context);\n}\n\n_s(useWeb3Context, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nexport const Provider = ({\n  children\n}) => {\n  _s2();\n\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  function updateAccount(data) {\n    dispatch({\n      type: UPDATE_ACCOUNT,\n      ...data\n    });\n  }\n\n  function updateNetId(data) {\n    dispatch({\n      type: UPDATE_NET_ID,\n      ...data\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: useMemo(() => ({\n      state,\n      updateAccount,\n      updateNetId\n    }), [state]),\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 94,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Provider, \"YZ9ruT8KF2zwZVQR6L5qb4/XQfA=\");\n\n_c = Provider;\nexport function Updater() {\n  _s3();\n\n  const {\n    state,\n    updateNetId\n  } = useWeb3Context();\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToAccount(state.web3, (error, account) => {\n        if (error) {\n          console.error(error);\n        }\n\n        if (account !== undefined && account !== state.account) {\n          window.location.reload();\n        }\n      });\n      return unsubscribe;\n    }\n  }, [state.web3, state.account]);\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToNetId(state.web3, (error, netId) => {\n        if (error) {\n          console.error(error);\n        }\n\n        if (netId) {\n          if (state.netId === 0) {\n            updateNetId({\n              netId\n            });\n          } else if (netId !== state.netId) {\n            window.location.reload();\n          }\n        }\n      });\n      return unsubscribe;\n    }\n  }, [state.web3, state.netId, updateNetId]);\n  return null;\n}\n\n_s3(Updater, \"+l68oOT1KxcOxg6cvyGaQFLPbzo=\", false, function () {\n  return [useWeb3Context];\n});\n\n_c2 = Updater;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Provider\");\n$RefreshReg$(_c2, \"Updater\");","map":{"version":3,"sources":["/Users/kelvinho/Documents/Coding/HoHey-main 4 2/hoheywebsite/client/src/contexts/Web3.tsx"],"names":["React","createContext","useContext","useEffect","useMemo","useReducer","subscribeToAccount","subscribeToNetId","INITIAL_STATE","account","web3","netId","UPDATE_ACCOUNT","UPDATE_NET_ID","reducer","state","action","type","Web3Context","updateAccount","_data","updateNetId","useWeb3Context","Provider","children","dispatch","data","Updater","unsubscribe","error","console","undefined","window","location","reload"],"mappings":"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","sourcesContent":["import React, {\n  createContext,\n  useContext,\n  useEffect,\n  useMemo,\n  useReducer,\n} from \"react\";\nimport Web3 from \"web3\";\nimport { subscribeToAccount, subscribeToNetId } from \"../api/web3\";\n\ninterface State {\n  account: string;\n  web3: Web3 | null;\n  netId: number;\n}\n\nconst INITIAL_STATE: State = {\n  account: \"\",\n  web3: null,\n  netId: 0,\n};\n\nconst UPDATE_ACCOUNT = \"UPDATE_ACCOUNT\";\nconst UPDATE_NET_ID = \"UPDATE_NET_ID\";\n\ninterface UpdateAccount {\n  type: \"UPDATE_ACCOUNT\";\n  account: string;\n  web3?: Web3;\n}\n\ninterface UpdateNetId {\n  type: \"UPDATE_NET_ID\";\n  netId: number;\n}\n\ntype Action = UpdateAccount | UpdateNetId;\n\nfunction reducer(state: State = INITIAL_STATE, action: Action) {\n  switch (action.type) {\n    case UPDATE_ACCOUNT: {\n      const web3 = action.web3 || state.web3;\n      const { account } = action;\n\n      return {\n        ...state,\n        web3,\n        account,\n      };\n    }\n    case UPDATE_NET_ID: {\n      const { netId } = action;\n\n      return {\n        ...state,\n        netId,\n      };\n    }\n    default:\n      return state;\n  }\n}\n\nconst Web3Context = createContext({\n  state: INITIAL_STATE,\n  updateAccount: (_data: { account: string; web3?: Web3 }) => {},\n  updateNetId: (_data: { netId: number }) => {},\n});\n\nexport function useWeb3Context() {\n  return useContext(Web3Context);\n}\n\ninterface ProviderProps {}\n\nexport const Provider: React.FC<ProviderProps> = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, INITIAL_STATE);\n\n  function updateAccount(data: { account: string; web3?: Web3 }) {\n    dispatch({\n      type: UPDATE_ACCOUNT,\n      ...data,\n    });\n  }\n\n  function updateNetId(data: { netId: number }) {\n    dispatch({\n      type: UPDATE_NET_ID,\n      ...data,\n    });\n  }\n\n  return (\n    <Web3Context.Provider\n      value={useMemo(\n        () => ({\n          state,\n          updateAccount,\n          updateNetId,\n        }),\n        [state]\n      )}\n    >\n      {children}\n    </Web3Context.Provider>\n  );\n};\n\nexport function Updater() {\n  const { state, updateNetId } = useWeb3Context();\n\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToAccount(state.web3, (error, account) => {\n        if (error) {\n          console.error(error);\n        }\n        if (account !== undefined && account !== state.account) {\n          window.location.reload();\n        }\n      });\n\n      return unsubscribe;\n    }\n  }, [state.web3, state.account]);\n\n  useEffect(() => {\n    if (state.web3) {\n      const unsubscribe = subscribeToNetId(state.web3, (error, netId) => {\n        if (error) {\n          console.error(error);\n        }\n        if (netId) {\n          if (state.netId === 0) {\n            updateNetId({ netId });\n          } else if (netId !== state.netId) {\n            window.location.reload();\n          }\n        }\n      });\n\n      return unsubscribe;\n    }\n  }, [state.web3, state.netId, updateNetId]);\n\n  return null;\n}\n"]},"metadata":{},"sourceType":"module"}