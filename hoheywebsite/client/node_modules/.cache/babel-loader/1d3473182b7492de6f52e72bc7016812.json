{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass InvalidMetaTransactionsArrayLengthsError extends revert_error_1.RevertError {\n  constructor(mtxCount, signatureCount) {\n    super('InvalidMetaTransactionsArrayLengthsError', 'InvalidMetaTransactionsArrayLengthsError(uint256 mtxCount, uint256 signatureCount)', {\n      mtxCount,\n      signatureCount\n    });\n  }\n\n}\n\nexports.InvalidMetaTransactionsArrayLengthsError = InvalidMetaTransactionsArrayLengthsError;\n\nclass MetaTransactionAlreadyExecutedError extends revert_error_1.RevertError {\n  constructor(mtxHash, executedBlockNumber) {\n    super('MetaTransactionAlreadyExecutedError', 'MetaTransactionAlreadyExecutedError(bytes32 mtxHash, uint256 executedBlockNumber)', {\n      mtxHash,\n      executedBlockNumber\n    });\n  }\n\n}\n\nexports.MetaTransactionAlreadyExecutedError = MetaTransactionAlreadyExecutedError;\n\nclass MetaTransactionUnsupportedFunctionError extends revert_error_1.RevertError {\n  constructor(mtxHash, selector) {\n    super('MetaTransactionUnsupportedFunctionError', 'MetaTransactionUnsupportedFunctionError(bytes32 mtxHash, bytes4 selector)', {\n      mtxHash,\n      selector\n    });\n  }\n\n}\n\nexports.MetaTransactionUnsupportedFunctionError = MetaTransactionUnsupportedFunctionError;\n\nclass MetaTransactionWrongSenderError extends revert_error_1.RevertError {\n  constructor(mtxHash, sender, expectedSender) {\n    super('MetaTransactionWrongSenderError', 'MetaTransactionWrongSenderError(bytes32 mtxHash, address sender, address expectedSender)', {\n      mtxHash,\n      sender,\n      expectedSender\n    });\n  }\n\n}\n\nexports.MetaTransactionWrongSenderError = MetaTransactionWrongSenderError;\n\nclass MetaTransactionExpiredError extends revert_error_1.RevertError {\n  constructor(mtxHash, time, expirationTime) {\n    super('MetaTransactionExpiredError', 'MetaTransactionExpiredError(bytes32 mtxHash, uint256 time, uint256 expirationTime)', {\n      mtxHash,\n      time,\n      expirationTime\n    });\n  }\n\n}\n\nexports.MetaTransactionExpiredError = MetaTransactionExpiredError;\n\nclass MetaTransactionGasPriceError extends revert_error_1.RevertError {\n  constructor(mtxHash, gasPrice, minGasPrice, maxGasPrice) {\n    super('MetaTransactionGasPriceError', 'MetaTransactionGasPriceError(bytes32 mtxHash, uint256 gasPrice, uint256 minGasPrice, uint256 maxGasPrice)', {\n      mtxHash,\n      gasPrice,\n      minGasPrice,\n      maxGasPrice\n    });\n  }\n\n}\n\nexports.MetaTransactionGasPriceError = MetaTransactionGasPriceError;\n\nclass MetaTransactionInsufficientEthError extends revert_error_1.RevertError {\n  constructor(mtxHash, ethBalance, ethRequired) {\n    super('MetaTransactionInsufficientEthError', 'MetaTransactionInsufficientEthError(bytes32 mtxHash, uint256 ethBalance, uint256 ethRequired)', {\n      mtxHash,\n      ethBalance,\n      ethRequired\n    });\n  }\n\n}\n\nexports.MetaTransactionInsufficientEthError = MetaTransactionInsufficientEthError;\n\nclass MetaTransactionInvalidSignatureError extends revert_error_1.RevertError {\n  constructor(mtxHash, signature, errData) {\n    super('MetaTransactionInvalidSignatureError', 'MetaTransactionInvalidSignatureError(bytes32 mtxHash, bytes signature, bytes errData)', {\n      mtxHash,\n      signature,\n      errData\n    });\n  }\n\n}\n\nexports.MetaTransactionInvalidSignatureError = MetaTransactionInvalidSignatureError;\n\nclass MetaTransactionCallFailedError extends revert_error_1.RevertError {\n  constructor(mtxHash, callData, returnData) {\n    super('MetaTransactionCallFailedError', 'MetaTransactionCallFailedError(bytes32 mtxHash, bytes callData, bytes returnData)', {\n      mtxHash,\n      callData,\n      returnData\n    });\n  }\n\n}\n\nexports.MetaTransactionCallFailedError = MetaTransactionCallFailedError;\nconst types = [InvalidMetaTransactionsArrayLengthsError, MetaTransactionAlreadyExecutedError, MetaTransactionUnsupportedFunctionError, MetaTransactionWrongSenderError, MetaTransactionExpiredError, MetaTransactionGasPriceError, MetaTransactionInsufficientEthError, MetaTransactionInvalidSignatureError, MetaTransactionCallFailedError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/zero-ex/meta_transaction_revert_errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass InvalidMetaTransactionsArrayLengthsError extends revert_error_1.RevertError {\n    constructor(mtxCount, signatureCount) {\n        super('InvalidMetaTransactionsArrayLengthsError', 'InvalidMetaTransactionsArrayLengthsError(uint256 mtxCount, uint256 signatureCount)', {\n            mtxCount,\n            signatureCount,\n        });\n    }\n}\nexports.InvalidMetaTransactionsArrayLengthsError = InvalidMetaTransactionsArrayLengthsError;\nclass MetaTransactionAlreadyExecutedError extends revert_error_1.RevertError {\n    constructor(mtxHash, executedBlockNumber) {\n        super('MetaTransactionAlreadyExecutedError', 'MetaTransactionAlreadyExecutedError(bytes32 mtxHash, uint256 executedBlockNumber)', {\n            mtxHash,\n            executedBlockNumber,\n        });\n    }\n}\nexports.MetaTransactionAlreadyExecutedError = MetaTransactionAlreadyExecutedError;\nclass MetaTransactionUnsupportedFunctionError extends revert_error_1.RevertError {\n    constructor(mtxHash, selector) {\n        super('MetaTransactionUnsupportedFunctionError', 'MetaTransactionUnsupportedFunctionError(bytes32 mtxHash, bytes4 selector)', {\n            mtxHash,\n            selector,\n        });\n    }\n}\nexports.MetaTransactionUnsupportedFunctionError = MetaTransactionUnsupportedFunctionError;\nclass MetaTransactionWrongSenderError extends revert_error_1.RevertError {\n    constructor(mtxHash, sender, expectedSender) {\n        super('MetaTransactionWrongSenderError', 'MetaTransactionWrongSenderError(bytes32 mtxHash, address sender, address expectedSender)', {\n            mtxHash,\n            sender,\n            expectedSender,\n        });\n    }\n}\nexports.MetaTransactionWrongSenderError = MetaTransactionWrongSenderError;\nclass MetaTransactionExpiredError extends revert_error_1.RevertError {\n    constructor(mtxHash, time, expirationTime) {\n        super('MetaTransactionExpiredError', 'MetaTransactionExpiredError(bytes32 mtxHash, uint256 time, uint256 expirationTime)', {\n            mtxHash,\n            time,\n            expirationTime,\n        });\n    }\n}\nexports.MetaTransactionExpiredError = MetaTransactionExpiredError;\nclass MetaTransactionGasPriceError extends revert_error_1.RevertError {\n    constructor(mtxHash, gasPrice, minGasPrice, maxGasPrice) {\n        super('MetaTransactionGasPriceError', 'MetaTransactionGasPriceError(bytes32 mtxHash, uint256 gasPrice, uint256 minGasPrice, uint256 maxGasPrice)', {\n            mtxHash,\n            gasPrice,\n            minGasPrice,\n            maxGasPrice,\n        });\n    }\n}\nexports.MetaTransactionGasPriceError = MetaTransactionGasPriceError;\nclass MetaTransactionInsufficientEthError extends revert_error_1.RevertError {\n    constructor(mtxHash, ethBalance, ethRequired) {\n        super('MetaTransactionInsufficientEthError', 'MetaTransactionInsufficientEthError(bytes32 mtxHash, uint256 ethBalance, uint256 ethRequired)', {\n            mtxHash,\n            ethBalance,\n            ethRequired,\n        });\n    }\n}\nexports.MetaTransactionInsufficientEthError = MetaTransactionInsufficientEthError;\nclass MetaTransactionInvalidSignatureError extends revert_error_1.RevertError {\n    constructor(mtxHash, signature, errData) {\n        super('MetaTransactionInvalidSignatureError', 'MetaTransactionInvalidSignatureError(bytes32 mtxHash, bytes signature, bytes errData)', {\n            mtxHash,\n            signature,\n            errData,\n        });\n    }\n}\nexports.MetaTransactionInvalidSignatureError = MetaTransactionInvalidSignatureError;\nclass MetaTransactionCallFailedError extends revert_error_1.RevertError {\n    constructor(mtxHash, callData, returnData) {\n        super('MetaTransactionCallFailedError', 'MetaTransactionCallFailedError(bytes32 mtxHash, bytes callData, bytes returnData)', {\n            mtxHash,\n            callData,\n            returnData,\n        });\n    }\n}\nexports.MetaTransactionCallFailedError = MetaTransactionCallFailedError;\nconst types = [\n    InvalidMetaTransactionsArrayLengthsError,\n    MetaTransactionAlreadyExecutedError,\n    MetaTransactionUnsupportedFunctionError,\n    MetaTransactionWrongSenderError,\n    MetaTransactionExpiredError,\n    MetaTransactionGasPriceError,\n    MetaTransactionInsufficientEthError,\n    MetaTransactionInvalidSignatureError,\n    MetaTransactionCallFailedError,\n];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=meta_transaction_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}