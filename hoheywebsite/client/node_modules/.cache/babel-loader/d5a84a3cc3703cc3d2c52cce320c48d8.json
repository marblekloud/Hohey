{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass LiquidityProviderIncompleteSellError extends revert_error_1.RevertError {\n  constructor(providerAddress, makerToken, takerToken, sellAmount, boughtAmount, minBuyAmount) {\n    super('LiquidityProviderIncompleteSellError', 'LiquidityProviderIncompleteSellError(address providerAddress, address makerToken, address takerToken, uint256 sellAmount, uint256 boughtAmount, uint256 minBuyAmount)', {\n      providerAddress,\n      makerToken,\n      takerToken,\n      sellAmount,\n      boughtAmount,\n      minBuyAmount\n    });\n  }\n\n}\n\nexports.LiquidityProviderIncompleteSellError = LiquidityProviderIncompleteSellError;\n\nclass NoLiquidityProviderForMarketError extends revert_error_1.RevertError {\n  constructor(xAsset, yAsset) {\n    super('NoLiquidityProviderForMarketError', 'NoLiquidityProviderForMarketError(address xAsset, address yAsset)', {\n      xAsset,\n      yAsset\n    });\n  }\n\n}\n\nexports.NoLiquidityProviderForMarketError = NoLiquidityProviderForMarketError;\nconst types = [LiquidityProviderIncompleteSellError, NoLiquidityProviderForMarketError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/zero-ex/liquidity_provider_revert_errors.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAGA;;;AACA,MAAa,oCAAb,SAA0D,cAAA,CAAA,WAA1D,CAAqE;AACjE,EAAA,WAAA,CACI,eADJ,EAEI,UAFJ,EAGI,UAHJ,EAII,UAJJ,EAKI,YALJ,EAMI,YANJ,EAM4B;AAExB,UACI,sCADJ,EAEI,uKAFJ,EAGI;AACI,MAAA,eADJ;AAEI,MAAA,UAFJ;AAGI,MAAA,UAHJ;AAII,MAAA,UAJJ;AAKI,MAAA,YALJ;AAMI,MAAA;AANJ,KAHJ;AAYH;;AArBgE;;AAArE,OAAA,CAAA,oCAAA,GAAA,oCAAA;;AAwBA,MAAa,iCAAb,SAAuD,cAAA,CAAA,WAAvD,CAAkE;AAC9D,EAAA,WAAA,CAAY,MAAZ,EAA6B,MAA7B,EAA4C;AACxC,UACI,mCADJ,EAEI,mEAFJ,EAGI;AACI,MAAA,MADJ;AAEI,MAAA;AAFJ,KAHJ;AAQH;;AAV6D;;AAAlE,OAAA,CAAA,iCAAA,GAAA,iCAAA;AAaA,MAAM,KAAK,GAAG,CAAC,oCAAD,EAAuC,iCAAvC,CAAd,C,CAEA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass LiquidityProviderIncompleteSellError extends revert_error_1.RevertError {\n    constructor(providerAddress, makerToken, takerToken, sellAmount, boughtAmount, minBuyAmount) {\n        super('LiquidityProviderIncompleteSellError', 'LiquidityProviderIncompleteSellError(address providerAddress, address makerToken, address takerToken, uint256 sellAmount, uint256 boughtAmount, uint256 minBuyAmount)', {\n            providerAddress,\n            makerToken,\n            takerToken,\n            sellAmount,\n            boughtAmount,\n            minBuyAmount,\n        });\n    }\n}\nexports.LiquidityProviderIncompleteSellError = LiquidityProviderIncompleteSellError;\nclass NoLiquidityProviderForMarketError extends revert_error_1.RevertError {\n    constructor(xAsset, yAsset) {\n        super('NoLiquidityProviderForMarketError', 'NoLiquidityProviderForMarketError(address xAsset, address yAsset)', {\n            xAsset,\n            yAsset,\n        });\n    }\n}\nexports.NoLiquidityProviderForMarketError = NoLiquidityProviderForMarketError;\nconst types = [LiquidityProviderIncompleteSellError, NoLiquidityProviderForMarketError];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=liquidity_provider_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}