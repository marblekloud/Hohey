{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass UnregisteredAssetProxyError extends revert_error_1.RevertError {\n  constructor() {\n    super('UnregisteredAssetProxyError', 'UnregisteredAssetProxyError()', {});\n  }\n\n}\n\nexports.UnregisteredAssetProxyError = UnregisteredAssetProxyError;\n\nclass CompleteBuyFailedError extends revert_error_1.RevertError {\n  constructor(expectedAssetBuyAmount, actualAssetBuyAmount) {\n    super('CompleteBuyFailedError', 'CompleteBuyFailedError(uint256 expectedAssetBuyAmount, uint256 actualAssetBuyAmount)', {\n      expectedAssetBuyAmount,\n      actualAssetBuyAmount\n    });\n  }\n\n}\n\nexports.CompleteBuyFailedError = CompleteBuyFailedError;\n\nclass CompleteSellFailedError extends revert_error_1.RevertError {\n  constructor(expectedAssetSellAmount, actualAssetSellAmount) {\n    super('CompleteSellFailedError', 'CompleteSellFailedError(uint256 expectedAssetSellAmount, uint256 actualAssetSellAmount)', {\n      expectedAssetSellAmount,\n      actualAssetSellAmount\n    });\n  }\n\n}\n\nexports.CompleteSellFailedError = CompleteSellFailedError;\n\nclass UnsupportedFeeError extends revert_error_1.RevertError {\n  constructor(takerFeeAssetData) {\n    super('UnsupportedFeeError', 'UnsupportedFeeError(bytes takerFeeAssetData)', {\n      takerFeeAssetData\n    });\n  }\n\n}\n\nexports.UnsupportedFeeError = UnsupportedFeeError;\n\nclass OverspentWethError extends revert_error_1.RevertError {\n  constructor(wethSpent, msgValue) {\n    super('OverspentWethError', 'OverspentWethError(uint256 wethSpent, uint256 msgValue)', {\n      wethSpent,\n      msgValue\n    });\n  }\n\n}\n\nexports.OverspentWethError = OverspentWethError;\n\nclass MsgValueCannotEqualZeroError extends revert_error_1.RevertError {\n  constructor() {\n    super('MsgValueCannotEqualZeroError', 'MsgValueCannotEqualZeroError()', {});\n  }\n\n}\n\nexports.MsgValueCannotEqualZeroError = MsgValueCannotEqualZeroError;\nconst types = [UnregisteredAssetProxyError, CompleteBuyFailedError, CompleteSellFailedError, UnsupportedFeeError, OverspentWethError, MsgValueCannotEqualZeroError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/exchange-forwarder/revert_errors.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAEA;;;AAEA,MAAa,2BAAb,SAAiD,cAAA,CAAA,WAAjD,CAA4D;AACxD,EAAA,WAAA,GAAA;AACI,UAAM,6BAAN,EAAqC,+BAArC,EAAsE,EAAtE;AACH;;AAHuD;;AAA5D,OAAA,CAAA,2BAAA,GAAA,2BAAA;;AAMA,MAAa,sBAAb,SAA4C,cAAA,CAAA,WAA5C,CAAuD;AACnD,EAAA,WAAA,CACI,sBADJ,EAEI,oBAFJ,EAEsD;AAElD,UACI,wBADJ,EAEI,sFAFJ,EAGI;AAAE,MAAA,sBAAF;AAA0B,MAAA;AAA1B,KAHJ;AAKH;;AAVkD;;AAAvD,OAAA,CAAA,sBAAA,GAAA,sBAAA;;AAaA,MAAa,uBAAb,SAA6C,cAAA,CAAA,WAA7C,CAAwD;AACpD,EAAA,WAAA,CACI,uBADJ,EAEI,qBAFJ,EAEuD;AAEnD,UACI,yBADJ,EAEI,yFAFJ,EAGI;AAAE,MAAA,uBAAF;AAA2B,MAAA;AAA3B,KAHJ;AAKH;;AAVmD;;AAAxD,OAAA,CAAA,uBAAA,GAAA,uBAAA;;AAaA,MAAa,mBAAb,SAAyC,cAAA,CAAA,WAAzC,CAAoD;AAChD,EAAA,WAAA,CAAY,iBAAZ,EAAsC;AAClC,UAAM,qBAAN,EAA6B,8CAA7B,EAA6E;AAAE,MAAA;AAAF,KAA7E;AACH;;AAH+C;;AAApD,OAAA,CAAA,mBAAA,GAAA,mBAAA;;AAMA,MAAa,kBAAb,SAAwC,cAAA,CAAA,WAAxC,CAAmD;AAC/C,EAAA,WAAA,CAAY,SAAZ,EAAqD,QAArD,EAA2F;AACvF,UAAM,oBAAN,EAA4B,yDAA5B,EAAuF;AACnF,MAAA,SADmF;AAEnF,MAAA;AAFmF,KAAvF;AAIH;;AAN8C;;AAAnD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AASA,MAAa,4BAAb,SAAkD,cAAA,CAAA,WAAlD,CAA6D;AACzD,EAAA,WAAA,GAAA;AACI,UAAM,8BAAN,EAAsC,gCAAtC,EAAwE,EAAxE;AACH;;AAHwD;;AAA7D,OAAA,CAAA,4BAAA,GAAA,4BAAA;AAMA,MAAM,KAAK,GAAG,CACV,2BADU,EAEV,sBAFU,EAGV,uBAHU,EAIV,mBAJU,EAKV,kBALU,EAMV,4BANU,CAAd,C,CASA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass UnregisteredAssetProxyError extends revert_error_1.RevertError {\n    constructor() {\n        super('UnregisteredAssetProxyError', 'UnregisteredAssetProxyError()', {});\n    }\n}\nexports.UnregisteredAssetProxyError = UnregisteredAssetProxyError;\nclass CompleteBuyFailedError extends revert_error_1.RevertError {\n    constructor(expectedAssetBuyAmount, actualAssetBuyAmount) {\n        super('CompleteBuyFailedError', 'CompleteBuyFailedError(uint256 expectedAssetBuyAmount, uint256 actualAssetBuyAmount)', { expectedAssetBuyAmount, actualAssetBuyAmount });\n    }\n}\nexports.CompleteBuyFailedError = CompleteBuyFailedError;\nclass CompleteSellFailedError extends revert_error_1.RevertError {\n    constructor(expectedAssetSellAmount, actualAssetSellAmount) {\n        super('CompleteSellFailedError', 'CompleteSellFailedError(uint256 expectedAssetSellAmount, uint256 actualAssetSellAmount)', { expectedAssetSellAmount, actualAssetSellAmount });\n    }\n}\nexports.CompleteSellFailedError = CompleteSellFailedError;\nclass UnsupportedFeeError extends revert_error_1.RevertError {\n    constructor(takerFeeAssetData) {\n        super('UnsupportedFeeError', 'UnsupportedFeeError(bytes takerFeeAssetData)', { takerFeeAssetData });\n    }\n}\nexports.UnsupportedFeeError = UnsupportedFeeError;\nclass OverspentWethError extends revert_error_1.RevertError {\n    constructor(wethSpent, msgValue) {\n        super('OverspentWethError', 'OverspentWethError(uint256 wethSpent, uint256 msgValue)', {\n            wethSpent,\n            msgValue,\n        });\n    }\n}\nexports.OverspentWethError = OverspentWethError;\nclass MsgValueCannotEqualZeroError extends revert_error_1.RevertError {\n    constructor() {\n        super('MsgValueCannotEqualZeroError', 'MsgValueCannotEqualZeroError()', {});\n    }\n}\nexports.MsgValueCannotEqualZeroError = MsgValueCannotEqualZeroError;\nconst types = [\n    UnregisteredAssetProxyError,\n    CompleteBuyFailedError,\n    CompleteSellFailedError,\n    UnsupportedFeeError,\n    OverspentWethError,\n    MsgValueCannotEqualZeroError,\n];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=revert_errors.js.map"]},"metadata":{},"sourceType":"module"}