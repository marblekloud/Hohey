{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereum_types_1 = require(\"ethereum-types\");\n\nconst ethUtil = require(\"ethereumjs-util\");\n\nconst _ = require(\"lodash\");\n\nconst blob_1 = require(\"../abstract_data_types/types/blob\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass StaticBytesDataType extends blob_1.AbstractBlobDataType {\n  constructor(dataItem, dataTypeFactory) {\n    super(dataItem, dataTypeFactory, StaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME);\n\n    if (!StaticBytesDataType.matchType(dataItem.type)) {\n      throw new Error(`Tried to instantiate Static Bytes with bad input: ${dataItem}`);\n    }\n\n    this._width = StaticBytesDataType._decodeWidthFromType(dataItem.type);\n  }\n\n  static matchType(type) {\n    return StaticBytesDataType._MATCHER.test(type);\n  }\n\n  static _decodeWidthFromType(type) {\n    const matches = StaticBytesDataType._MATCHER.exec(type);\n\n    const width = matches !== null && matches.length === 3 && matches[2] !== undefined ? parseInt(matches[2], constants_1.constants.DEC_BASE) : StaticBytesDataType._DEFAULT_WIDTH;\n    return width;\n  }\n\n  getSignatureType() {\n    // Note that `byte` reduces to `bytes1`\n    return `${ethereum_types_1.SolidityTypes.Bytes}${this._width}`;\n  }\n\n  encodeValue(value) {\n    // 1/2 Convert value into a buffer and do bounds checking\n    this._sanityCheckValue(value);\n\n    const valueBuf = ethUtil.toBuffer(value); // 2/2 Store value as hex\n\n    const valuePadded = ethUtil.setLengthRight(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    return valuePadded;\n  }\n\n  decodeValue(calldata) {\n    const valueBufPadded = calldata.popWord();\n    const valueBuf = valueBufPadded.slice(0, this._width);\n    const value = ethUtil.bufferToHex(valueBuf);\n\n    this._sanityCheckValue(value);\n\n    return value;\n  }\n\n  getDefaultValue() {\n    const valueBufPadded = constants_1.constants.EMPTY_EVM_WORD_BUFFER;\n    const valueBuf = valueBufPadded.slice(0, this._width);\n    const value = ethUtil.bufferToHex(valueBuf);\n    return value;\n  }\n\n  _sanityCheckValue(value) {\n    if (typeof value === 'string') {\n      if (!_.startsWith(value, '0x')) {\n        throw new Error(`Tried to encode non-hex value. Value must include '0x' prefix.`);\n      } else if (value.length % 2 !== 0) {\n        throw new Error(`Tried to assign ${value}, which is contains a half-byte. Use full bytes only.`);\n      }\n    }\n\n    const valueBuf = ethUtil.toBuffer(value);\n\n    if (valueBuf.byteLength > this._width) {\n      throw new Error(`Tried to assign ${value} (${valueBuf.byteLength} bytes), which exceeds max bytes that can be stored in a ${this.getSignature()}`);\n    }\n  }\n\n}\n\nStaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\nStaticBytesDataType._MATCHER = RegExp('^(byte|bytes(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32))$');\nStaticBytesDataType._DEFAULT_WIDTH = 1;\nexports.StaticBytesDataType = StaticBytesDataType;","map":{"version":3,"sources":["../../../../src/abi_encoder/evm_data_types/static_bytes.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_types_1 = require(\"ethereum-types\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst _ = require(\"lodash\");\nconst blob_1 = require(\"../abstract_data_types/types/blob\");\nconst constants_1 = require(\"../utils/constants\");\nclass StaticBytesDataType extends blob_1.AbstractBlobDataType {\n    constructor(dataItem, dataTypeFactory) {\n        super(dataItem, dataTypeFactory, StaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME);\n        if (!StaticBytesDataType.matchType(dataItem.type)) {\n            throw new Error(`Tried to instantiate Static Bytes with bad input: ${dataItem}`);\n        }\n        this._width = StaticBytesDataType._decodeWidthFromType(dataItem.type);\n    }\n    static matchType(type) {\n        return StaticBytesDataType._MATCHER.test(type);\n    }\n    static _decodeWidthFromType(type) {\n        const matches = StaticBytesDataType._MATCHER.exec(type);\n        const width = matches !== null && matches.length === 3 && matches[2] !== undefined\n            ? parseInt(matches[2], constants_1.constants.DEC_BASE)\n            : StaticBytesDataType._DEFAULT_WIDTH;\n        return width;\n    }\n    getSignatureType() {\n        // Note that `byte` reduces to `bytes1`\n        return `${ethereum_types_1.SolidityTypes.Bytes}${this._width}`;\n    }\n    encodeValue(value) {\n        // 1/2 Convert value into a buffer and do bounds checking\n        this._sanityCheckValue(value);\n        const valueBuf = ethUtil.toBuffer(value);\n        // 2/2 Store value as hex\n        const valuePadded = ethUtil.setLengthRight(valueBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        return valuePadded;\n    }\n    decodeValue(calldata) {\n        const valueBufPadded = calldata.popWord();\n        const valueBuf = valueBufPadded.slice(0, this._width);\n        const value = ethUtil.bufferToHex(valueBuf);\n        this._sanityCheckValue(value);\n        return value;\n    }\n    getDefaultValue() {\n        const valueBufPadded = constants_1.constants.EMPTY_EVM_WORD_BUFFER;\n        const valueBuf = valueBufPadded.slice(0, this._width);\n        const value = ethUtil.bufferToHex(valueBuf);\n        return value;\n    }\n    _sanityCheckValue(value) {\n        if (typeof value === 'string') {\n            if (!_.startsWith(value, '0x')) {\n                throw new Error(`Tried to encode non-hex value. Value must include '0x' prefix.`);\n            }\n            else if (value.length % 2 !== 0) {\n                throw new Error(`Tried to assign ${value}, which is contains a half-byte. Use full bytes only.`);\n            }\n        }\n        const valueBuf = ethUtil.toBuffer(value);\n        if (valueBuf.byteLength > this._width) {\n            throw new Error(`Tried to assign ${value} (${valueBuf.byteLength} bytes), which exceeds max bytes that can be stored in a ${this.getSignature()}`);\n        }\n    }\n}\nStaticBytesDataType._SIZE_KNOWN_AT_COMPILE_TIME = true;\nStaticBytesDataType._MATCHER = RegExp('^(byte|bytes(1|2|3|4|5|6|7|8|9|10|11|12|13|14|15|16|17|18|19|20|21|22|23|24|25|26|27|28|29|30|31|32))$');\nStaticBytesDataType._DEFAULT_WIDTH = 1;\nexports.StaticBytesDataType = StaticBytesDataType;\n//# sourceMappingURL=static_bytes.js.map"]},"metadata":{},"sourceType":"module"}