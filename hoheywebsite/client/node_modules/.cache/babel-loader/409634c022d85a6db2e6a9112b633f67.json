{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst bignumber_js_1 = require(\"bignumber.js\");\n\nexports.BigNumber = bignumber_js_1.BigNumber;\nbignumber_js_1.BigNumber.config({\n  // By default BigNumber's `toString` method converts to exponential notation if the value has\n  // more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number\n  EXPONENTIAL_AT: 1000,\n  // Note(albrow): This is the lowest value for which\n  // `x.div(y).floor() === x.divToInt(y)`\n  // for all values of x and y <= MAX_UINT256, where MAX_UINT256 is the\n  // maximum number represented by the uint256 type in Solidity (2^256-1).\n  DECIMAL_PLACES: 78\n}); // Set a debug print function for NodeJS\n// Upstream issue: https://github.com/MikeMcl/bignumber.js/issues/188\n\nconst isNode = require(\"detect-node\");\n\nif (isNode) {\n  // Dynamically load a NodeJS specific module.\n  // TypeScript requires all imports to be global, so we need to use\n  // `const` here and disable the tslint warning.\n  // tslint:disable-next-line: no-var-requires\n  const util = require('util'); // Set a custom util.inspect function\n  // HACK: We add a function to the BigNumber class by assigning to the\n  //       prototype. The function name is a symbol provided by Node.\n\n\n  bignumber_js_1.BigNumber.prototype[util.inspect.custom] = function () {\n    // HACK: When executed, `this` will refer to the BigNumber instance.\n    //       This is also why we need a function expression instead of an\n    //       arrow function, as the latter does not have a `this`.\n    // Return the readable string representation\n    // tslint:disable-next-line: no-invalid-this\n    return this.toString();\n  };\n} // HACK: CLobber config and set to prevent imported packages from poisoning\n// global BigNumber config\n\n\n(orig => bignumber_js_1.BigNumber.config = (..._args) => orig({}))(bignumber_js_1.BigNumber.config);\n\nbignumber_js_1.BigNumber.set = bignumber_js_1.BigNumber.config;","map":{"version":3,"sources":["../../src/configured_bignumber.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAyCS,OAAA,CAAA,SAAA,GAzCA,cAAA,CAAA,SAyCA;AAvCT,cAAA,CAAA,SAAA,CAAU,MAAV,CAAiB;AACb;AACA;AACA,EAAA,cAAc,EAAE,IAHH;AAIb;AACA;AACA;AACA;AACA,EAAA,cAAc,EAAE;AARH,CAAjB,E,CAWA;AACA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AACA,IAAI,MAAJ,EAAY;AACR;AACA;AACA;AACA;AACA,QAAM,IAAI,GAAG,OAAO,CAAC,MAAD,CAApB,CALQ,CAOR;AACA;AACA;;;AACC,EAAA,cAAA,CAAA,SAAA,CAAU,SAAV,CAA4B,IAAI,CAAC,OAAL,CAAa,MAAzC,IAAmD,YAAA;AAChD;AACA;AACA;AACA;AACA;AACA,WAAO,KAAK,QAAL,EAAP;AACH,GAPA;AAQJ,C,CAED;AACA;;;AACA,CAAC,IAAI,IAAK,cAAA,CAAA,SAAA,CAAU,MAAV,GAAmB,CAAC,GAAG,KAAJ,KAAqB,IAAI,CAAC,EAAD,CAAtD,EAA6D,cAAA,CAAA,SAAA,CAAU,MAAvE;;AACA,cAAA,CAAA,SAAA,CAAU,GAAV,GAAgB,cAAA,CAAA,SAAA,CAAU,MAA1B","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst bignumber_js_1 = require(\"bignumber.js\");\nexports.BigNumber = bignumber_js_1.BigNumber;\nbignumber_js_1.BigNumber.config({\n    // By default BigNumber's `toString` method converts to exponential notation if the value has\n    // more then 20 digits. We want to avoid this behavior, so we set EXPONENTIAL_AT to a high number\n    EXPONENTIAL_AT: 1000,\n    // Note(albrow): This is the lowest value for which\n    // `x.div(y).floor() === x.divToInt(y)`\n    // for all values of x and y <= MAX_UINT256, where MAX_UINT256 is the\n    // maximum number represented by the uint256 type in Solidity (2^256-1).\n    DECIMAL_PLACES: 78,\n});\n// Set a debug print function for NodeJS\n// Upstream issue: https://github.com/MikeMcl/bignumber.js/issues/188\nconst isNode = require(\"detect-node\");\nif (isNode) {\n    // Dynamically load a NodeJS specific module.\n    // TypeScript requires all imports to be global, so we need to use\n    // `const` here and disable the tslint warning.\n    // tslint:disable-next-line: no-var-requires\n    const util = require('util');\n    // Set a custom util.inspect function\n    // HACK: We add a function to the BigNumber class by assigning to the\n    //       prototype. The function name is a symbol provided by Node.\n    bignumber_js_1.BigNumber.prototype[util.inspect.custom] = function () {\n        // HACK: When executed, `this` will refer to the BigNumber instance.\n        //       This is also why we need a function expression instead of an\n        //       arrow function, as the latter does not have a `this`.\n        // Return the readable string representation\n        // tslint:disable-next-line: no-invalid-this\n        return this.toString();\n    };\n}\n// HACK: CLobber config and set to prevent imported packages from poisoning\n// global BigNumber config\n(orig => (bignumber_js_1.BigNumber.config = (..._args) => orig({})))(bignumber_js_1.BigNumber.config);\nbignumber_js_1.BigNumber.set = bignumber_js_1.BigNumber.config;\n//# sourceMappingURL=configured_bignumber.js.map"]},"metadata":{},"sourceType":"module"}