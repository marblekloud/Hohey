{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass WalletExecuteCallFailedError extends revert_error_1.RevertError {\n  constructor(wallet, callTarget, callData, callValue, errorData) {\n    super('WalletExecuteCallFailedError', 'WalletExecuteCallFailedError(address wallet, address callTarget, bytes callData, uint256 callValue, bytes errorData)', {\n      wallet,\n      callTarget,\n      callData,\n      callValue,\n      errorData\n    });\n  }\n\n}\n\nexports.WalletExecuteCallFailedError = WalletExecuteCallFailedError;\n\nclass WalletExecuteDelegateCallFailedError extends revert_error_1.RevertError {\n  constructor(wallet, callTarget, callData, errorData) {\n    super('WalletExecuteDelegateCallFailedError', 'WalletExecuteDelegateCallFailedError(address wallet, address callTarget, bytes callData, bytes errorData)', {\n      wallet,\n      callTarget,\n      callData,\n      errorData\n    });\n  }\n\n}\n\nexports.WalletExecuteDelegateCallFailedError = WalletExecuteDelegateCallFailedError;\nconst types = [WalletExecuteCallFailedError, WalletExecuteDelegateCallFailedError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/zero-ex/wallet_revert_errors.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAGA;;;AACA,MAAa,4BAAb,SAAkD,cAAA,CAAA,WAAlD,CAA6D;AACzD,EAAA,WAAA,CAAY,MAAZ,EAA6B,UAA7B,EAAkD,QAAlD,EAAqE,SAArE,EAA4F,SAA5F,EAA8G;AAC1G,UACI,8BADJ,EAEI,sHAFJ,EAGI;AACI,MAAA,MADJ;AAEI,MAAA,UAFJ;AAGI,MAAA,QAHJ;AAII,MAAA,SAJJ;AAKI,MAAA;AALJ,KAHJ;AAWH;;AAbwD;;AAA7D,OAAA,CAAA,4BAAA,GAAA,4BAAA;;AAgBA,MAAa,oCAAb,SAA0D,cAAA,CAAA,WAA1D,CAAqE;AACjE,EAAA,WAAA,CAAY,MAAZ,EAA6B,UAA7B,EAAkD,QAAlD,EAAqE,SAArE,EAAuF;AACnF,UACI,sCADJ,EAEI,2GAFJ,EAGI;AACI,MAAA,MADJ;AAEI,MAAA,UAFJ;AAGI,MAAA,QAHJ;AAII,MAAA;AAJJ,KAHJ;AAUH;;AAZgE;;AAArE,OAAA,CAAA,oCAAA,GAAA,oCAAA;AAeA,MAAM,KAAK,GAAG,CAAC,4BAAD,EAA+B,oCAA/B,CAAd,C,CAEA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass WalletExecuteCallFailedError extends revert_error_1.RevertError {\n    constructor(wallet, callTarget, callData, callValue, errorData) {\n        super('WalletExecuteCallFailedError', 'WalletExecuteCallFailedError(address wallet, address callTarget, bytes callData, uint256 callValue, bytes errorData)', {\n            wallet,\n            callTarget,\n            callData,\n            callValue,\n            errorData,\n        });\n    }\n}\nexports.WalletExecuteCallFailedError = WalletExecuteCallFailedError;\nclass WalletExecuteDelegateCallFailedError extends revert_error_1.RevertError {\n    constructor(wallet, callTarget, callData, errorData) {\n        super('WalletExecuteDelegateCallFailedError', 'WalletExecuteDelegateCallFailedError(address wallet, address callTarget, bytes callData, bytes errorData)', {\n            wallet,\n            callTarget,\n            callData,\n            errorData,\n        });\n    }\n}\nexports.WalletExecuteDelegateCallFailedError = WalletExecuteDelegateCallFailedError;\nconst types = [WalletExecuteCallFailedError, WalletExecuteDelegateCallFailedError];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=wallet_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}