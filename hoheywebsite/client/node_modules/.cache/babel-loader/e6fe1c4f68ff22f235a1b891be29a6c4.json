{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nvar ValueErrorCodes;\n\n(function (ValueErrorCodes) {\n  ValueErrorCodes[ValueErrorCodes[\"TooSmall\"] = 0] = \"TooSmall\";\n  ValueErrorCodes[ValueErrorCodes[\"TooLarge\"] = 1] = \"TooLarge\";\n})(ValueErrorCodes = exports.ValueErrorCodes || (exports.ValueErrorCodes = {}));\n\nvar BinOpErrorCodes;\n\n(function (BinOpErrorCodes) {\n  BinOpErrorCodes[BinOpErrorCodes[\"AdditionOverflow\"] = 0] = \"AdditionOverflow\";\n  BinOpErrorCodes[BinOpErrorCodes[\"MultiplicationOverflow\"] = 1] = \"MultiplicationOverflow\";\n  BinOpErrorCodes[BinOpErrorCodes[\"DivisionByZero\"] = 2] = \"DivisionByZero\";\n  BinOpErrorCodes[BinOpErrorCodes[\"DivisionOverflow\"] = 3] = \"DivisionOverflow\";\n})(BinOpErrorCodes = exports.BinOpErrorCodes || (exports.BinOpErrorCodes = {}));\n\nclass SignedValueError extends revert_error_1.RevertError {\n  constructor(error, n) {\n    super('SignedValueError', 'SignedValueError(uint8 error, int256 n)', {\n      error,\n      n\n    });\n  }\n\n}\n\nexports.SignedValueError = SignedValueError;\n\nclass UnsignedValueError extends revert_error_1.RevertError {\n  constructor(error, n) {\n    super('UnsignedValueError', 'UnsignedValueError(uint8 error, uint256 n)', {\n      error,\n      n\n    });\n  }\n\n}\n\nexports.UnsignedValueError = UnsignedValueError;\n\nclass BinOpError extends revert_error_1.RevertError {\n  constructor(error, a, b) {\n    super('BinOpError', 'BinOpError(uint8 error, int256 a, int256 b)', {\n      error,\n      a,\n      b\n    });\n  }\n\n}\n\nexports.BinOpError = BinOpError;\nconst types = [SignedValueError, UnsignedValueError, BinOpError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/staking/fixed_math_revert_errors.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAEA;;;AAEA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACvB,EAAA,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,UAAA,CAAA,GAAA,CAAA,CAAA,GAAA,UAAA;AACH,CAHD,EAAY,eAAe,GAAf,OAAA,CAAA,eAAA,KAAA,OAAA,CAAA,eAAA,GAAe,EAAf,CAAZ;;AAKA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACvB,EAAA,eAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACH,CALD,EAAY,eAAe,GAAf,OAAA,CAAA,eAAA,KAAA,OAAA,CAAA,eAAA,GAAe,EAAf,CAAZ;;AAOA,MAAa,gBAAb,SAAsC,cAAA,CAAA,WAAtC,CAAiD;AAC7C,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAoE;AAChE,UAAM,kBAAN,EAA0B,yCAA1B,EAAqE;AACjE,MAAA,KADiE;AAEjE,MAAA;AAFiE,KAArE;AAIH;;AAN4C;;AAAjD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AASA,MAAa,kBAAb,SAAwC,cAAA,CAAA,WAAxC,CAAmD;AAC/C,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAoE;AAChE,UAAM,oBAAN,EAA4B,4CAA5B,EAA0E;AACtE,MAAA,KADsE;AAEtE,MAAA;AAFsE,KAA1E;AAIH;;AAN8C;;AAAnD,OAAA,CAAA,kBAAA,GAAA,kBAAA;;AASA,MAAa,UAAb,SAAgC,cAAA,CAAA,WAAhC,CAA2C;AACvC,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAsE,CAAtE,EAAqG;AACjG,UAAM,YAAN,EAAoB,6CAApB,EAAmE;AAC/D,MAAA,KAD+D;AAE/D,MAAA,CAF+D;AAG/D,MAAA;AAH+D,KAAnE;AAKH;;AAPsC;;AAA3C,OAAA,CAAA,UAAA,GAAA,UAAA;AAUA,MAAM,KAAK,GAAG,CAAC,gBAAD,EAAmB,kBAAnB,EAAuC,UAAvC,CAAd,C,CAEA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nvar ValueErrorCodes;\n(function (ValueErrorCodes) {\n    ValueErrorCodes[ValueErrorCodes[\"TooSmall\"] = 0] = \"TooSmall\";\n    ValueErrorCodes[ValueErrorCodes[\"TooLarge\"] = 1] = \"TooLarge\";\n})(ValueErrorCodes = exports.ValueErrorCodes || (exports.ValueErrorCodes = {}));\nvar BinOpErrorCodes;\n(function (BinOpErrorCodes) {\n    BinOpErrorCodes[BinOpErrorCodes[\"AdditionOverflow\"] = 0] = \"AdditionOverflow\";\n    BinOpErrorCodes[BinOpErrorCodes[\"MultiplicationOverflow\"] = 1] = \"MultiplicationOverflow\";\n    BinOpErrorCodes[BinOpErrorCodes[\"DivisionByZero\"] = 2] = \"DivisionByZero\";\n    BinOpErrorCodes[BinOpErrorCodes[\"DivisionOverflow\"] = 3] = \"DivisionOverflow\";\n})(BinOpErrorCodes = exports.BinOpErrorCodes || (exports.BinOpErrorCodes = {}));\nclass SignedValueError extends revert_error_1.RevertError {\n    constructor(error, n) {\n        super('SignedValueError', 'SignedValueError(uint8 error, int256 n)', {\n            error,\n            n,\n        });\n    }\n}\nexports.SignedValueError = SignedValueError;\nclass UnsignedValueError extends revert_error_1.RevertError {\n    constructor(error, n) {\n        super('UnsignedValueError', 'UnsignedValueError(uint8 error, uint256 n)', {\n            error,\n            n,\n        });\n    }\n}\nexports.UnsignedValueError = UnsignedValueError;\nclass BinOpError extends revert_error_1.RevertError {\n    constructor(error, a, b) {\n        super('BinOpError', 'BinOpError(uint8 error, int256 a, int256 b)', {\n            error,\n            a,\n            b,\n        });\n    }\n}\nexports.BinOpError = BinOpError;\nconst types = [SignedValueError, UnsignedValueError, BinOpError];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=fixed_math_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}