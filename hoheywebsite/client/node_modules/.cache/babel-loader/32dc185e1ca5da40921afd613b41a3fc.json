{"ast":null,"code":"import { AbstractConnector } from '@web3-react/abstract-connector';\nimport Web3ProviderEngine from 'web3-provider-engine';\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor';\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js';\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}\n\nvar TrezorConnector = /*#__PURE__*/function (_AbstractConnector) {\n  _inheritsLoose(TrezorConnector, _AbstractConnector);\n\n  function TrezorConnector(_ref) {\n    var _this;\n\n    var chainId = _ref.chainId,\n        url = _ref.url,\n        pollingInterval = _ref.pollingInterval,\n        requestTimeoutMs = _ref.requestTimeoutMs,\n        _ref$config = _ref.config,\n        config = _ref$config === void 0 ? {} : _ref$config,\n        manifestEmail = _ref.manifestEmail,\n        manifestAppUrl = _ref.manifestAppUrl;\n    _this = _AbstractConnector.call(this, {\n      supportedChainIds: [chainId]\n    }) || this;\n    _this.chainId = chainId;\n    _this.url = url;\n    _this.pollingInterval = pollingInterval;\n    _this.requestTimeoutMs = requestTimeoutMs;\n    _this.config = config;\n    _this.manifestEmail = manifestEmail;\n    _this.manifestAppUrl = manifestAppUrl;\n    return _this;\n  }\n\n  var _proto = TrezorConnector.prototype;\n\n  _proto.activate = function activate() {\n    try {\n      var _temp3 = function _temp3() {\n        _this3.provider.start();\n\n        return {\n          provider: _this3.provider,\n          chainId: _this3.chainId\n        };\n      };\n\n      var _this3 = this;\n\n      var _temp4 = function () {\n        if (!_this3.provider) {\n          return Promise.resolve(import('trezor-connect')).then(function (_ref2) {\n            var TrezorConnect = _ref2[\"default\"];\n            TrezorConnect.manifest({\n              email: _this3.manifestEmail,\n              appUrl: _this3.manifestAppUrl\n            });\n            var engine = new Web3ProviderEngine({\n              pollingInterval: _this3.pollingInterval\n            });\n            engine.addProvider(new TrezorSubprovider(_extends({\n              trezorConnectClientApi: TrezorConnect\n            }, _this3.config)));\n            engine.addProvider(new CacheSubprovider());\n            engine.addProvider(new RPCSubprovider(_this3.url, _this3.requestTimeoutMs));\n            _this3.provider = engine;\n          });\n        }\n      }();\n\n      return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getProvider = function getProvider() {\n    try {\n      var _this5 = this;\n\n      return Promise.resolve(_this5.provider);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getChainId = function getChainId() {\n    try {\n      var _this7 = this;\n\n      return Promise.resolve(_this7.chainId);\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.getAccount = function getAccount() {\n    try {\n      var _this9 = this;\n\n      return Promise.resolve(_this9.provider._providers[0].getAccountsAsync(1).then(function (accounts) {\n        return accounts[0];\n      }));\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  };\n\n  _proto.deactivate = function deactivate() {\n    this.provider.stop();\n  };\n\n  return TrezorConnector;\n}(AbstractConnector);\n\nexport { TrezorConnector };","map":{"version":3,"sources":["../src/index.ts"],"names":["TrezorConnector","chainId","url","pollingInterval","requestTimeoutMs","config","manifestEmail","manifestAppUrl","supportedChainIds","provider","TrezorConnect","email","appUrl","engine","trezorConnectClientApi","accounts","deactivate"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiBaA,eAAb,GAAA,aAAA,UAAA,kBAAA,EAAA;AAAA,EAAA,cAAA,CAAA,eAAA,EAAA,kBAAA,CAAA;;AAWE,WAAA,eAAA,CAAA,IAAA,EAAA;;;QACEC,OAAAA,GAAAA,IAAAA,CAAAA,O;QACAC,GAAAA,GAAAA,IAAAA,CAAAA,G;QACAC,eAAAA,GAAAA,IAAAA,CAAAA,e;QACAC,gBAAAA,GAAAA,IAAAA,CAAAA,gB;2BACAC,M;QAAAA,MAAAA,GAAAA,WAAAA,KAAAA,KAAAA,CAAAA,GAAS,EAATA,GAAS,W;QACTC,aAAAA,GAAAA,IAAAA,CAAAA,a;QACAC,cAAAA,GAAAA,IAAAA,CAAAA,c;AAEA,IAAA,KAAA,GAAA,kBAAA,CAAA,IAAA,CAAA,IAAA,EAAM;AAAEC,MAAAA,iBAAiB,EAAE,CAAA,OAAA;AAArB,KAAN,KAAA,IAAA;AAEA,IAAA,KAAA,CAAA,OAAA,GAAA,OAAA;AACA,IAAA,KAAA,CAAA,GAAA,GAAA,GAAA;AACA,IAAA,KAAA,CAAA,eAAA,GAAA,eAAA;AACA,IAAA,KAAA,CAAA,gBAAA,GAAA,gBAAA;AACA,IAAA,KAAA,CAAA,MAAA,GAAA,MAAA;AACA,IAAA,KAAA,CAAA,aAAA,GAAA,aAAA;AACA,IAAA,KAAA,CAAA,cAAA,GAAA,cAAA;;AACD;;AA7BH,MAAA,MAAA,GAAA,eAAA,CAAA,SAAA;;AAAA,EAAA,MAAA,CAAA,QAAA,GAAA,SAAA,QAAA,GAAA;AAAA,QAAA;;AA6CI,QAAA,MAAA,CAAA,QAAA,CAAA,KAAA;;AAEA,eAAO;AAAEC,UAAAA,QAAQ,EAAE,MAAA,CAAZ,QAAA;AAA2BR,UAAAA,OAAO,EAAE,MAAA,CAAKA;AAAzC,SAAP;;;mBAfK,I;;;YAAD,CAAC,MAAA,CAAKQ,Q,EAAAA;iCACiC,OAAA,gBAAA,C,EAAA,I,CAAA,UAAA,KAAA,EAAA;gBAAxBC,aAAAA,GAAAA,KAAAA,CAAAA,SAAAA,C;AACjBA,YAAAA,aAAa,CAAbA,QAAAA,CAAuB;AACrBC,cAAAA,KAAK,EAAE,MAAA,CADc,aAAA;AAErBC,cAAAA,MAAM,EAAE,MAAA,CAAKL;AAFQ,aAAvBG;AAIA,gBAAMG,MAAM,GAAG,IAAA,kBAAA,CAAuB;AAAEV,cAAAA,eAAe,EAAE,MAAA,CAAKA;AAAxB,aAAvB,CAAf;AACAU,YAAAA,MAAM,CAANA,WAAAA,CAAmB,IAAA,iBAAA,CAAA,QAAA,CAAA;AAAwBC,cAAAA,sBAAsB,EAAEJ;AAAhD,aAAA,EAAkE,MAAA,CAArFG,MAAmB,CAAA,CAAnBA;AACAA,YAAAA,MAAM,CAANA,WAAAA,CAAmB,IAAnBA,gBAAmB,EAAnBA;AACAA,YAAAA,MAAM,CAANA,WAAAA,CAAmB,IAAA,cAAA,CAAmB,MAAA,CAAnB,GAAA,EAA6B,MAAA,CAAhDA,gBAAmB,CAAnBA;AACA,YAAA,MAAA,CAAA,QAAA,GAAA,MAAA;;;;;;AA1CN,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,WAAA,GAAA,SAAA,WAAA,GAAA;AAAA,QAAA;mBAmDW,I;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAP,QAAA,CAAA;AAnDJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAAA,SAAA,UAAA,GAAA;AAAA,QAAA;mBAuDW,I;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAP,OAAA,CAAA;AAvDJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAAA,SAAA,UAAA,GAAA;AAAA,QAAA;mBA2DW,I;;AAAP,aAAA,OAAA,CAAA,OAAA,CAAO,MAAA,CAAA,QAAA,CAAA,UAAA,CAAA,CAAA,EAAA,gBAAA,CAAA,CAAA,EAAA,IAAA,CAAqD,UAAA,QAAA,EAAA;AAAA,eAAgCE,QAAQ,CAAxC,CAAwC,CAAxC;AAA5D,OAAO,CAAP,CAAA;AA3DJ,KAAA,CAAA,OAAA,CAAA,EAAA;AAAA,aAAA,OAAA,CAAA,MAAA,CAAA,CAAA,CAAA;AAAA;AAAA,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GA8DSC,SAAAA,UAAAA,GAAAA;AACL,SAAA,QAAA,CAAA,IAAA;AA/DJ,GAAA;;AAAA,SAAA,eAAA;AAAA,CAAA,CAAA,iBAAA,C","sourcesContent":["import { ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport Web3ProviderEngine from 'web3-provider-engine'\nimport { TrezorSubprovider } from '@0x/subproviders/lib/src/subproviders/trezor' // https://github.com/0xProject/0x-monorepo/issues/1400\nimport CacheSubprovider from 'web3-provider-engine/subproviders/cache.js'\nimport { RPCSubprovider } from '@0x/subproviders/lib/src/subproviders/rpc_subprovider' // https://github.com/0xProject/0x-monorepo/issues/1400\n\ninterface TrezorConnectorArguments {\n  chainId: number\n  url: string\n  pollingInterval?: number\n  requestTimeoutMs?: number\n  config?: any\n  manifestEmail: string\n  manifestAppUrl: string\n}\n\nexport class TrezorConnector extends AbstractConnector {\n  private readonly chainId: number\n  private readonly url: string\n  private readonly pollingInterval?: number\n  private readonly requestTimeoutMs?: number\n  private readonly config: any\n  private readonly manifestEmail: string\n  private readonly manifestAppUrl: string\n\n  private provider: any\n\n  constructor({\n    chainId,\n    url,\n    pollingInterval,\n    requestTimeoutMs,\n    config = {},\n    manifestEmail,\n    manifestAppUrl\n  }: TrezorConnectorArguments) {\n    super({ supportedChainIds: [chainId] })\n\n    this.chainId = chainId\n    this.url = url\n    this.pollingInterval = pollingInterval\n    this.requestTimeoutMs = requestTimeoutMs\n    this.config = config\n    this.manifestEmail = manifestEmail\n    this.manifestAppUrl = manifestAppUrl\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      const { default: TrezorConnect } = await import('trezor-connect')\n      TrezorConnect.manifest({\n        email: this.manifestEmail,\n        appUrl: this.manifestAppUrl\n      })\n      const engine = new Web3ProviderEngine({ pollingInterval: this.pollingInterval })\n      engine.addProvider(new TrezorSubprovider({ trezorConnectClientApi: TrezorConnect, ...this.config }))\n      engine.addProvider(new CacheSubprovider())\n      engine.addProvider(new RPCSubprovider(this.url, this.requestTimeoutMs))\n      this.provider = engine\n    }\n\n    this.provider.start()\n\n    return { provider: this.provider, chainId: this.chainId }\n  }\n\n  public async getProvider(): Promise<Web3ProviderEngine> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.chainId\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider._providers[0].getAccountsAsync(1).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider.stop()\n  }\n}\n"]},"metadata":{},"sourceType":"module"}