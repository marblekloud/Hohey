{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst jsonschema_1 = require(\"jsonschema\");\n\nconst values = require(\"lodash.values\");\n\nconst schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\n\n\nclass SchemaValidator {\n  static _assertSchemaDefined(schema) {\n    if (schema === undefined) {\n      throw new Error(`Cannot add undefined schema`);\n    }\n  }\n  /**\n   * Instantiates a SchemaValidator instance\n   */\n\n\n  constructor() {\n    this._validator = new jsonschema_1.Validator();\n\n    for (const schema of values(schemas_1.schemas)) {\n      SchemaValidator._assertSchemaDefined(schema);\n\n      this._validator.addSchema(schema, schema.id);\n    }\n  }\n  /**\n   * Add a schema to the validator. All schemas and sub-schemas must be added to\n   * the validator before the `validate` and `isValid` methods can be called with\n   * instances of that schema.\n   * @param schema The schema to add\n   */\n\n\n  addSchema(schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n\n    this._validator.addSchema(schema, schema.id);\n  } // In order to validate a complex JS object using jsonschema, we must replace any complex\n  // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n  // complex types implement the `toString` method, we can stringify the object and\n  // then parse it. The resultant object can then be checked using jsonschema.\n\n  /**\n   * Validate the JS object conforms to a specific JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns The results of the validation\n   */\n\n\n  validate(instance, schema) {\n    SchemaValidator._assertSchemaDefined(schema);\n\n    const jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n    return this._validator.validate(jsonSchemaCompatibleObject, schema);\n  }\n  /**\n   * Check whether an instance properly adheres to a JSON schema\n   * @param instance JS object in question\n   * @param schema Schema to check against\n   * @returns Whether or not the instance adheres to the schema\n   */\n\n\n  isValid(instance, schema) {\n    const isValid = this.validate(instance, schema).errors.length === 0;\n    return isValid;\n  }\n\n}\n\nexports.SchemaValidator = SchemaValidator;","map":{"version":3,"sources":["../../src/schema_validator.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,YAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;AAEA,MAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAEA;;AAEG;;;AACH,MAAa,eAAb,CAA4B;AAEW,SAApB,oBAAoB,CAAC,MAAD,EAAe;AAC9C,QAAI,MAAM,KAAK,SAAf,EAA0B;AACtB,YAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACH;AACJ;AACD;;AAEG;;;AACH,EAAA,WAAA,GAAA;AACI,SAAK,UAAL,GAAkB,IAAI,YAAA,CAAA,SAAJ,EAAlB;;AACA,SAAK,MAAM,MAAX,IAAqB,MAAM,CAAC,SAAA,CAAA,OAAD,CAA3B,EAAsC;AAClC,MAAA,eAAe,CAAC,oBAAhB,CAAqC,MAArC;;AACA,WAAK,UAAL,CAAgB,SAAhB,CAA0B,MAA1B,EAAkC,MAAM,CAAC,EAAzC;AACH;AACJ;AACD;;;;;AAKG;;;AACI,EAAA,SAAS,CAAC,MAAD,EAAe;AAC3B,IAAA,eAAe,CAAC,oBAAhB,CAAqC,MAArC;;AACA,SAAK,UAAL,CAAgB,SAAhB,CAA0B,MAA1B,EAAkC,MAAM,CAAC,EAAzC;AACH,GA1BuB,CA2BxB;AACA;AACA;AACA;;AACA;;;;;AAKG;;;AACI,EAAA,QAAQ,CAAC,QAAD,EAAgB,MAAhB,EAA8B;AACzC,IAAA,eAAe,CAAC,oBAAhB,CAAqC,MAArC;;AACA,UAAM,0BAA0B,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,SAAL,CAAe,QAAf,CAAX,CAAnC;AACA,WAAO,KAAK,UAAL,CAAgB,QAAhB,CAAyB,0BAAzB,EAAqD,MAArD,CAAP;AACH;AACD;;;;;AAKG;;;AACI,EAAA,OAAO,CAAC,QAAD,EAAgB,MAAhB,EAA8B;AACxC,UAAM,OAAO,GAAG,KAAK,QAAL,CAAc,QAAd,EAAwB,MAAxB,EAAgC,MAAhC,CAAuC,MAAvC,KAAkD,CAAlE;AACA,WAAO,OAAP;AACH;;AAnDuB;;AAA5B,OAAA,CAAA,eAAA,GAAA,eAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst jsonschema_1 = require(\"jsonschema\");\nconst values = require(\"lodash.values\");\nconst schemas_1 = require(\"./schemas\");\n/**\n * A validator for [JSON-schemas](http://json-schema.org/)\n */\nclass SchemaValidator {\n    static _assertSchemaDefined(schema) {\n        if (schema === undefined) {\n            throw new Error(`Cannot add undefined schema`);\n        }\n    }\n    /**\n     * Instantiates a SchemaValidator instance\n     */\n    constructor() {\n        this._validator = new jsonschema_1.Validator();\n        for (const schema of values(schemas_1.schemas)) {\n            SchemaValidator._assertSchemaDefined(schema);\n            this._validator.addSchema(schema, schema.id);\n        }\n    }\n    /**\n     * Add a schema to the validator. All schemas and sub-schemas must be added to\n     * the validator before the `validate` and `isValid` methods can be called with\n     * instances of that schema.\n     * @param schema The schema to add\n     */\n    addSchema(schema) {\n        SchemaValidator._assertSchemaDefined(schema);\n        this._validator.addSchema(schema, schema.id);\n    }\n    // In order to validate a complex JS object using jsonschema, we must replace any complex\n    // sub-types (e.g BigNumber) with a simpler string representation. Since BigNumber and other\n    // complex types implement the `toString` method, we can stringify the object and\n    // then parse it. The resultant object can then be checked using jsonschema.\n    /**\n     * Validate the JS object conforms to a specific JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns The results of the validation\n     */\n    validate(instance, schema) {\n        SchemaValidator._assertSchemaDefined(schema);\n        const jsonSchemaCompatibleObject = JSON.parse(JSON.stringify(instance));\n        return this._validator.validate(jsonSchemaCompatibleObject, schema);\n    }\n    /**\n     * Check whether an instance properly adheres to a JSON schema\n     * @param instance JS object in question\n     * @param schema Schema to check against\n     * @returns Whether or not the instance adheres to the schema\n     */\n    isValid(instance, schema) {\n        const isValid = this.validate(instance, schema).errors.length === 0;\n        return isValid;\n    }\n}\nexports.SchemaValidator = SchemaValidator;\n//# sourceMappingURL=schema_validator.js.map"]},"metadata":{},"sourceType":"module"}