{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass InsufficientEthAttachedError extends revert_error_1.RevertError {\n  constructor(ethAttached, ethNeeded) {\n    super('InsufficientEthAttachedError', 'InsufficientEthAttachedError(uint256 ethAttached, uint256 ethNeeded)', {\n      ethAttached,\n      ethNeeded\n    });\n  }\n\n}\n\nexports.InsufficientEthAttachedError = InsufficientEthAttachedError;\n\nclass IncompleteTransformERC20Error extends revert_error_1.RevertError {\n  constructor(outputToken, outputTokenAmount, minOutputTokenAmount) {\n    super('IncompleteTransformERC20Error', 'IncompleteTransformERC20Error(address outputToken, uint256 outputTokenAmount, uint256 minOutputTokenAmount)', {\n      outputToken,\n      outputTokenAmount,\n      minOutputTokenAmount\n    });\n  }\n\n}\n\nexports.IncompleteTransformERC20Error = IncompleteTransformERC20Error;\n\nclass NegativeTransformERC20OutputError extends revert_error_1.RevertError {\n  constructor(outputToken, outputTokenLostAmount) {\n    super('NegativeTransformERC20OutputError', 'NegativeTransformERC20OutputError(address outputToken, uint256 outputTokenLostAmount)', {\n      outputToken,\n      outputTokenLostAmount\n    });\n  }\n\n}\n\nexports.NegativeTransformERC20OutputError = NegativeTransformERC20OutputError;\n\nclass TransformerFailedError extends revert_error_1.RevertError {\n  constructor(transformer, transformerData, resultData) {\n    super('TransformerFailedError', 'TransformerFailedError(address transformer, bytes transformerData, bytes resultData)', {\n      transformer,\n      transformerData,\n      resultData\n    });\n  }\n\n}\n\nexports.TransformerFailedError = TransformerFailedError;\n\nclass OnlyCallableByDeployerError extends revert_error_1.RevertError {\n  constructor(caller, deployer) {\n    super('OnlyCallableByDeployerError', 'OnlyCallableByDeployerError(address caller, address deployer)', {\n      caller,\n      deployer\n    });\n  }\n\n}\n\nexports.OnlyCallableByDeployerError = OnlyCallableByDeployerError;\n\nclass InvalidExecutionContextError extends revert_error_1.RevertError {\n  constructor(actualContext, expectedContext) {\n    super('InvalidExecutionContextError', 'InvalidExecutionContextError(address actualContext, address expectedContext)', {\n      actualContext,\n      expectedContext\n    });\n  }\n\n}\n\nexports.InvalidExecutionContextError = InvalidExecutionContextError;\nvar InvalidTransformDataErrorCode;\n\n(function (InvalidTransformDataErrorCode) {\n  InvalidTransformDataErrorCode[InvalidTransformDataErrorCode[\"InvalidTokens\"] = 0] = \"InvalidTokens\";\n  InvalidTransformDataErrorCode[InvalidTransformDataErrorCode[\"InvalidArrayLength\"] = 1] = \"InvalidArrayLength\";\n})(InvalidTransformDataErrorCode = exports.InvalidTransformDataErrorCode || (exports.InvalidTransformDataErrorCode = {}));\n\nclass InvalidTransformDataError extends revert_error_1.RevertError {\n  constructor(errorCode, transformData) {\n    super('InvalidTransformDataError', 'InvalidTransformDataError(uint8 errorCode, bytes transformData)', {\n      errorCode,\n      transformData\n    });\n  }\n\n}\n\nexports.InvalidTransformDataError = InvalidTransformDataError;\n\nclass IncompleteFillSellQuoteError extends revert_error_1.RevertError {\n  constructor(sellToken, soldAmount, sellAmount) {\n    super('IncompleteFillSellQuoteError', 'IncompleteFillSellQuoteError(address sellToken, uint256 soldAmount, uint256 sellAmount)', {\n      sellToken,\n      soldAmount,\n      sellAmount\n    });\n  }\n\n}\n\nexports.IncompleteFillSellQuoteError = IncompleteFillSellQuoteError;\n\nclass IncompleteFillBuyQuoteError extends revert_error_1.RevertError {\n  constructor(buyToken, boughtAmount, buyAmount) {\n    super('IncompleteFillBuyQuoteError', 'IncompleteFillBuyQuoteError(address buyToken, uint256 boughtAmount, uint256 buyAmount)', {\n      buyToken,\n      boughtAmount,\n      buyAmount\n    });\n  }\n\n}\n\nexports.IncompleteFillBuyQuoteError = IncompleteFillBuyQuoteError;\n\nclass InsufficientTakerTokenError extends revert_error_1.RevertError {\n  constructor(tokenBalance, tokensNeeded) {\n    super('InsufficientTakerTokenError', 'InsufficientTakerTokenError(uint256 tokenBalance, uint256 tokensNeeded)', {\n      tokenBalance,\n      tokensNeeded\n    });\n  }\n\n}\n\nexports.InsufficientTakerTokenError = InsufficientTakerTokenError;\n\nclass InsufficientProtocolFeeError extends revert_error_1.RevertError {\n  constructor(ethBalance, ethNeeded) {\n    super('InsufficientProtocolFeeError', 'InsufficientProtocolFeeError(uint256 ethBalance, uint256 ethNeeded)', {\n      ethBalance,\n      ethNeeded\n    });\n  }\n\n}\n\nexports.InsufficientProtocolFeeError = InsufficientProtocolFeeError;\n\nclass InvalidERC20AssetDataError extends revert_error_1.RevertError {\n  constructor(assetData) {\n    super('InvalidERC20AssetDataError', 'InvalidERC20AssetDataError(bytes assetData)', {\n      assetData\n    });\n  }\n\n}\n\nexports.InvalidERC20AssetDataError = InvalidERC20AssetDataError;\n\nclass WrongNumberOfTokensReceivedError extends revert_error_1.RevertError {\n  constructor(actual, expected) {\n    super('WrongNumberOfTokensReceivedError', 'WrongNumberOfTokensReceivedError(uint256 actual, uint256 expected)', {\n      actual,\n      expected\n    });\n  }\n\n}\n\nexports.WrongNumberOfTokensReceivedError = WrongNumberOfTokensReceivedError;\n\nclass InvalidTokenReceivedError extends revert_error_1.RevertError {\n  constructor(token) {\n    super('InvalidTokenReceivedError', 'InvalidTokenReceivedError(address token)', {\n      token\n    });\n  }\n\n}\n\nexports.InvalidTokenReceivedError = InvalidTokenReceivedError;\n\nclass InvalidTakerFeeTokenError extends revert_error_1.RevertError {\n  constructor(token) {\n    super('InvalidTakerFeeTokenError', 'InvalidTakerFeeTokenError(address token)', {\n      token\n    });\n  }\n\n}\n\nexports.InvalidTakerFeeTokenError = InvalidTakerFeeTokenError;\nconst types = [InsufficientEthAttachedError, IncompleteTransformERC20Error, NegativeTransformERC20OutputError, TransformerFailedError, IncompleteFillSellQuoteError, IncompleteFillBuyQuoteError, InsufficientTakerTokenError, InsufficientProtocolFeeError, InvalidERC20AssetDataError, WrongNumberOfTokensReceivedError, InvalidTokenReceivedError, InvalidTransformDataError, InvalidTakerFeeTokenError, OnlyCallableByDeployerError, InvalidExecutionContextError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/zero-ex/transform_erc20_revert_errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass InsufficientEthAttachedError extends revert_error_1.RevertError {\n    constructor(ethAttached, ethNeeded) {\n        super('InsufficientEthAttachedError', 'InsufficientEthAttachedError(uint256 ethAttached, uint256 ethNeeded)', {\n            ethAttached,\n            ethNeeded,\n        });\n    }\n}\nexports.InsufficientEthAttachedError = InsufficientEthAttachedError;\nclass IncompleteTransformERC20Error extends revert_error_1.RevertError {\n    constructor(outputToken, outputTokenAmount, minOutputTokenAmount) {\n        super('IncompleteTransformERC20Error', 'IncompleteTransformERC20Error(address outputToken, uint256 outputTokenAmount, uint256 minOutputTokenAmount)', {\n            outputToken,\n            outputTokenAmount,\n            minOutputTokenAmount,\n        });\n    }\n}\nexports.IncompleteTransformERC20Error = IncompleteTransformERC20Error;\nclass NegativeTransformERC20OutputError extends revert_error_1.RevertError {\n    constructor(outputToken, outputTokenLostAmount) {\n        super('NegativeTransformERC20OutputError', 'NegativeTransformERC20OutputError(address outputToken, uint256 outputTokenLostAmount)', {\n            outputToken,\n            outputTokenLostAmount,\n        });\n    }\n}\nexports.NegativeTransformERC20OutputError = NegativeTransformERC20OutputError;\nclass TransformerFailedError extends revert_error_1.RevertError {\n    constructor(transformer, transformerData, resultData) {\n        super('TransformerFailedError', 'TransformerFailedError(address transformer, bytes transformerData, bytes resultData)', {\n            transformer,\n            transformerData,\n            resultData,\n        });\n    }\n}\nexports.TransformerFailedError = TransformerFailedError;\nclass OnlyCallableByDeployerError extends revert_error_1.RevertError {\n    constructor(caller, deployer) {\n        super('OnlyCallableByDeployerError', 'OnlyCallableByDeployerError(address caller, address deployer)', {\n            caller,\n            deployer,\n        });\n    }\n}\nexports.OnlyCallableByDeployerError = OnlyCallableByDeployerError;\nclass InvalidExecutionContextError extends revert_error_1.RevertError {\n    constructor(actualContext, expectedContext) {\n        super('InvalidExecutionContextError', 'InvalidExecutionContextError(address actualContext, address expectedContext)', {\n            actualContext,\n            expectedContext,\n        });\n    }\n}\nexports.InvalidExecutionContextError = InvalidExecutionContextError;\nvar InvalidTransformDataErrorCode;\n(function (InvalidTransformDataErrorCode) {\n    InvalidTransformDataErrorCode[InvalidTransformDataErrorCode[\"InvalidTokens\"] = 0] = \"InvalidTokens\";\n    InvalidTransformDataErrorCode[InvalidTransformDataErrorCode[\"InvalidArrayLength\"] = 1] = \"InvalidArrayLength\";\n})(InvalidTransformDataErrorCode = exports.InvalidTransformDataErrorCode || (exports.InvalidTransformDataErrorCode = {}));\nclass InvalidTransformDataError extends revert_error_1.RevertError {\n    constructor(errorCode, transformData) {\n        super('InvalidTransformDataError', 'InvalidTransformDataError(uint8 errorCode, bytes transformData)', {\n            errorCode,\n            transformData,\n        });\n    }\n}\nexports.InvalidTransformDataError = InvalidTransformDataError;\nclass IncompleteFillSellQuoteError extends revert_error_1.RevertError {\n    constructor(sellToken, soldAmount, sellAmount) {\n        super('IncompleteFillSellQuoteError', 'IncompleteFillSellQuoteError(address sellToken, uint256 soldAmount, uint256 sellAmount)', {\n            sellToken,\n            soldAmount,\n            sellAmount,\n        });\n    }\n}\nexports.IncompleteFillSellQuoteError = IncompleteFillSellQuoteError;\nclass IncompleteFillBuyQuoteError extends revert_error_1.RevertError {\n    constructor(buyToken, boughtAmount, buyAmount) {\n        super('IncompleteFillBuyQuoteError', 'IncompleteFillBuyQuoteError(address buyToken, uint256 boughtAmount, uint256 buyAmount)', {\n            buyToken,\n            boughtAmount,\n            buyAmount,\n        });\n    }\n}\nexports.IncompleteFillBuyQuoteError = IncompleteFillBuyQuoteError;\nclass InsufficientTakerTokenError extends revert_error_1.RevertError {\n    constructor(tokenBalance, tokensNeeded) {\n        super('InsufficientTakerTokenError', 'InsufficientTakerTokenError(uint256 tokenBalance, uint256 tokensNeeded)', {\n            tokenBalance,\n            tokensNeeded,\n        });\n    }\n}\nexports.InsufficientTakerTokenError = InsufficientTakerTokenError;\nclass InsufficientProtocolFeeError extends revert_error_1.RevertError {\n    constructor(ethBalance, ethNeeded) {\n        super('InsufficientProtocolFeeError', 'InsufficientProtocolFeeError(uint256 ethBalance, uint256 ethNeeded)', {\n            ethBalance,\n            ethNeeded,\n        });\n    }\n}\nexports.InsufficientProtocolFeeError = InsufficientProtocolFeeError;\nclass InvalidERC20AssetDataError extends revert_error_1.RevertError {\n    constructor(assetData) {\n        super('InvalidERC20AssetDataError', 'InvalidERC20AssetDataError(bytes assetData)', {\n            assetData,\n        });\n    }\n}\nexports.InvalidERC20AssetDataError = InvalidERC20AssetDataError;\nclass WrongNumberOfTokensReceivedError extends revert_error_1.RevertError {\n    constructor(actual, expected) {\n        super('WrongNumberOfTokensReceivedError', 'WrongNumberOfTokensReceivedError(uint256 actual, uint256 expected)', {\n            actual,\n            expected,\n        });\n    }\n}\nexports.WrongNumberOfTokensReceivedError = WrongNumberOfTokensReceivedError;\nclass InvalidTokenReceivedError extends revert_error_1.RevertError {\n    constructor(token) {\n        super('InvalidTokenReceivedError', 'InvalidTokenReceivedError(address token)', {\n            token,\n        });\n    }\n}\nexports.InvalidTokenReceivedError = InvalidTokenReceivedError;\nclass InvalidTakerFeeTokenError extends revert_error_1.RevertError {\n    constructor(token) {\n        super('InvalidTakerFeeTokenError', 'InvalidTakerFeeTokenError(address token)', {\n            token,\n        });\n    }\n}\nexports.InvalidTakerFeeTokenError = InvalidTakerFeeTokenError;\nconst types = [\n    InsufficientEthAttachedError,\n    IncompleteTransformERC20Error,\n    NegativeTransformERC20OutputError,\n    TransformerFailedError,\n    IncompleteFillSellQuoteError,\n    IncompleteFillBuyQuoteError,\n    InsufficientTakerTokenError,\n    InsufficientProtocolFeeError,\n    InvalidERC20AssetDataError,\n    WrongNumberOfTokensReceivedError,\n    InvalidTokenReceivedError,\n    InvalidTransformDataError,\n    InvalidTakerFeeTokenError,\n    OnlyCallableByDeployerError,\n    InvalidExecutionContextError,\n];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=transform_erc20_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}