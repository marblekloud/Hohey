{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nvar MakerPoolAssignmentErrorCodes;\n\n(function (MakerPoolAssignmentErrorCodes) {\n  MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressAlreadyRegistered\"] = 0] = \"MakerAddressAlreadyRegistered\";\n  MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressNotRegistered\"] = 1] = \"MakerAddressNotRegistered\";\n  MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressNotPendingAdd\"] = 2] = \"MakerAddressNotPendingAdd\";\n  MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"PoolIsFull\"] = 3] = \"PoolIsFull\";\n})(MakerPoolAssignmentErrorCodes = exports.MakerPoolAssignmentErrorCodes || (exports.MakerPoolAssignmentErrorCodes = {}));\n\nvar OperatorShareErrorCodes;\n\n(function (OperatorShareErrorCodes) {\n  OperatorShareErrorCodes[OperatorShareErrorCodes[\"OperatorShareTooLarge\"] = 0] = \"OperatorShareTooLarge\";\n  OperatorShareErrorCodes[OperatorShareErrorCodes[\"CanOnlyDecreaseOperatorShare\"] = 1] = \"CanOnlyDecreaseOperatorShare\";\n})(OperatorShareErrorCodes = exports.OperatorShareErrorCodes || (exports.OperatorShareErrorCodes = {}));\n\nvar InvalidParamValueErrorCodes;\n\n(function (InvalidParamValueErrorCodes) {\n  InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidCobbDouglasAlpha\"] = 0] = \"InvalidCobbDouglasAlpha\";\n  InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidRewardDelegatedStakeWeight\"] = 1] = \"InvalidRewardDelegatedStakeWeight\";\n  InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidMaximumMakersInPool\"] = 2] = \"InvalidMaximumMakersInPool\";\n  InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidMinimumPoolStake\"] = 3] = \"InvalidMinimumPoolStake\";\n  InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidEpochDuration\"] = 4] = \"InvalidEpochDuration\";\n})(InvalidParamValueErrorCodes = exports.InvalidParamValueErrorCodes || (exports.InvalidParamValueErrorCodes = {}));\n\nvar InitializationErrorCodes;\n\n(function (InitializationErrorCodes) {\n  InitializationErrorCodes[InitializationErrorCodes[\"MixinSchedulerAlreadyInitialized\"] = 0] = \"MixinSchedulerAlreadyInitialized\";\n  InitializationErrorCodes[InitializationErrorCodes[\"MixinParamsAlreadyInitialized\"] = 1] = \"MixinParamsAlreadyInitialized\";\n})(InitializationErrorCodes = exports.InitializationErrorCodes || (exports.InitializationErrorCodes = {}));\n\nvar ExchangeManagerErrorCodes;\n\n(function (ExchangeManagerErrorCodes) {\n  ExchangeManagerErrorCodes[ExchangeManagerErrorCodes[\"ExchangeAlreadyRegistered\"] = 0] = \"ExchangeAlreadyRegistered\";\n  ExchangeManagerErrorCodes[ExchangeManagerErrorCodes[\"ExchangeNotRegistered\"] = 1] = \"ExchangeNotRegistered\";\n})(ExchangeManagerErrorCodes = exports.ExchangeManagerErrorCodes || (exports.ExchangeManagerErrorCodes = {}));\n\nclass OnlyCallableByExchangeError extends revert_error_1.RevertError {\n  constructor(senderAddress) {\n    super('OnlyCallableByExchangeError', 'OnlyCallableByExchangeError(address senderAddress)', {\n      senderAddress\n    });\n  }\n\n}\n\nexports.OnlyCallableByExchangeError = OnlyCallableByExchangeError;\n\nclass ExchangeManagerError extends revert_error_1.RevertError {\n  constructor(errorCode, senderAddress) {\n    super('ExchangeManagerError', 'ExchangeManagerError(uint8 errorCode, address senderAddress)', {\n      errorCode,\n      senderAddress\n    });\n  }\n\n}\n\nexports.ExchangeManagerError = ExchangeManagerError;\n\nclass InsufficientBalanceError extends revert_error_1.RevertError {\n  constructor(amount, balance) {\n    super('InsufficientBalanceError', 'InsufficientBalanceError(uint256 amount, uint256 balance)', {\n      amount,\n      balance\n    });\n  }\n\n}\n\nexports.InsufficientBalanceError = InsufficientBalanceError;\n\nclass OnlyCallableByPoolOperatorError extends revert_error_1.RevertError {\n  constructor(senderAddress, poolId) {\n    super('OnlyCallableByPoolOperatorError', 'OnlyCallableByPoolOperatorError(address senderAddress, bytes32 poolId)', {\n      senderAddress,\n      poolId\n    });\n  }\n\n}\n\nexports.OnlyCallableByPoolOperatorError = OnlyCallableByPoolOperatorError;\n\nclass MakerPoolAssignmentError extends revert_error_1.RevertError {\n  constructor(error, makerAddress, poolId) {\n    super('MakerPoolAssignmentError', 'MakerPoolAssignmentError(uint8 error, address makerAddress, bytes32 poolId)', {\n      error,\n      makerAddress,\n      poolId\n    });\n  }\n\n}\n\nexports.MakerPoolAssignmentError = MakerPoolAssignmentError;\n\nclass BlockTimestampTooLowError extends revert_error_1.RevertError {\n  constructor(epochEndTime, currentBlockTimestamp) {\n    super('BlockTimestampTooLowError', 'BlockTimestampTooLowError(uint256 epochEndTime, uint256 currentBlockTimestamp)', {\n      epochEndTime,\n      currentBlockTimestamp\n    });\n  }\n\n}\n\nexports.BlockTimestampTooLowError = BlockTimestampTooLowError;\n\nclass OnlyCallableByStakingContractError extends revert_error_1.RevertError {\n  constructor(senderAddress) {\n    super('OnlyCallableByStakingContractError', 'OnlyCallableByStakingContractError(address senderAddress)', {\n      senderAddress\n    });\n  }\n\n}\n\nexports.OnlyCallableByStakingContractError = OnlyCallableByStakingContractError;\n\nclass OnlyCallableIfInCatastrophicFailureError extends revert_error_1.RevertError {\n  constructor() {\n    super('OnlyCallableIfInCatastrophicFailureError', 'OnlyCallableIfInCatastrophicFailureError()', {});\n  }\n\n}\n\nexports.OnlyCallableIfInCatastrophicFailureError = OnlyCallableIfInCatastrophicFailureError;\n\nclass OnlyCallableIfNotInCatastrophicFailureError extends revert_error_1.RevertError {\n  constructor() {\n    super('OnlyCallableIfNotInCatastrophicFailureError', 'OnlyCallableIfNotInCatastrophicFailureError()', {});\n  }\n\n}\n\nexports.OnlyCallableIfNotInCatastrophicFailureError = OnlyCallableIfNotInCatastrophicFailureError;\n\nclass OperatorShareError extends revert_error_1.RevertError {\n  constructor(error, poolId, operatorShare) {\n    super('OperatorShareError', 'OperatorShareError(uint8 error, bytes32 poolId, uint32 operatorShare)', {\n      error,\n      poolId,\n      operatorShare\n    });\n  }\n\n}\n\nexports.OperatorShareError = OperatorShareError;\n\nclass PoolExistenceError extends revert_error_1.RevertError {\n  constructor(poolId, alreadyExists) {\n    super('PoolExistenceError', 'PoolExistenceError(bytes32 poolId, bool alreadyExists)', {\n      poolId,\n      alreadyExists\n    });\n  }\n\n}\n\nexports.PoolExistenceError = PoolExistenceError;\n\nclass InvalidParamValueError extends revert_error_1.RevertError {\n  constructor(error) {\n    super('InvalidParamValueError', 'InvalidParamValueError(uint8 error)', {\n      error\n    });\n  }\n\n}\n\nexports.InvalidParamValueError = InvalidParamValueError;\n\nclass InvalidProtocolFeePaymentError extends revert_error_1.RevertError {\n  constructor(expectedProtocolFeePaid, actualProtocolFeePaid) {\n    super('InvalidProtocolFeePaymentError', 'InvalidProtocolFeePaymentError(uint256 expectedProtocolFeePaid, uint256 actualProtocolFeePaid)', {\n      expectedProtocolFeePaid,\n      actualProtocolFeePaid\n    });\n  }\n\n}\n\nexports.InvalidProtocolFeePaymentError = InvalidProtocolFeePaymentError;\n\nclass InitializationError extends revert_error_1.RevertError {\n  constructor(error) {\n    super('InitializationError', 'InitializationError(uint8 error)', {\n      error\n    });\n  }\n\n}\n\nexports.InitializationError = InitializationError;\n\nclass ProxyDestinationCannotBeNilError extends revert_error_1.RevertError {\n  constructor() {\n    super('ProxyDestinationCannotBeNilError', 'ProxyDestinationCannotBeNilError()', {});\n  }\n\n}\n\nexports.ProxyDestinationCannotBeNilError = ProxyDestinationCannotBeNilError;\n\nclass PreviousEpochNotFinalizedError extends revert_error_1.RevertError {\n  constructor(closingEpoch, unfinalizedPoolsRemaining) {\n    super('PreviousEpochNotFinalizedError', 'PreviousEpochNotFinalizedError(uint256 closingEpoch, uint256 unfinalizedPoolsRemaining)', {\n      closingEpoch,\n      unfinalizedPoolsRemaining\n    });\n  }\n\n}\n\nexports.PreviousEpochNotFinalizedError = PreviousEpochNotFinalizedError;\n\nclass PoolNotFinalizedError extends revert_error_1.RevertError {\n  constructor(poolId, epoch) {\n    super('PoolNotFinalizedError', 'PoolNotFinalizedError(bytes32 poolId, uint256 epoch)', {\n      poolId,\n      epoch\n    });\n  }\n\n}\n\nexports.PoolNotFinalizedError = PoolNotFinalizedError;\nconst types = [BlockTimestampTooLowError, ExchangeManagerError, InitializationError, InsufficientBalanceError, InvalidProtocolFeePaymentError, InvalidParamValueError, MakerPoolAssignmentError, OnlyCallableByExchangeError, OnlyCallableByPoolOperatorError, OnlyCallableByStakingContractError, OnlyCallableIfInCatastrophicFailureError, OnlyCallableIfNotInCatastrophicFailureError, OperatorShareError, PoolExistenceError, PreviousEpochNotFinalizedError, ProxyDestinationCannotBeNilError, PoolNotFinalizedError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/staking/staking_revert_errors.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nvar MakerPoolAssignmentErrorCodes;\n(function (MakerPoolAssignmentErrorCodes) {\n    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressAlreadyRegistered\"] = 0] = \"MakerAddressAlreadyRegistered\";\n    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressNotRegistered\"] = 1] = \"MakerAddressNotRegistered\";\n    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"MakerAddressNotPendingAdd\"] = 2] = \"MakerAddressNotPendingAdd\";\n    MakerPoolAssignmentErrorCodes[MakerPoolAssignmentErrorCodes[\"PoolIsFull\"] = 3] = \"PoolIsFull\";\n})(MakerPoolAssignmentErrorCodes = exports.MakerPoolAssignmentErrorCodes || (exports.MakerPoolAssignmentErrorCodes = {}));\nvar OperatorShareErrorCodes;\n(function (OperatorShareErrorCodes) {\n    OperatorShareErrorCodes[OperatorShareErrorCodes[\"OperatorShareTooLarge\"] = 0] = \"OperatorShareTooLarge\";\n    OperatorShareErrorCodes[OperatorShareErrorCodes[\"CanOnlyDecreaseOperatorShare\"] = 1] = \"CanOnlyDecreaseOperatorShare\";\n})(OperatorShareErrorCodes = exports.OperatorShareErrorCodes || (exports.OperatorShareErrorCodes = {}));\nvar InvalidParamValueErrorCodes;\n(function (InvalidParamValueErrorCodes) {\n    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidCobbDouglasAlpha\"] = 0] = \"InvalidCobbDouglasAlpha\";\n    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidRewardDelegatedStakeWeight\"] = 1] = \"InvalidRewardDelegatedStakeWeight\";\n    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidMaximumMakersInPool\"] = 2] = \"InvalidMaximumMakersInPool\";\n    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidMinimumPoolStake\"] = 3] = \"InvalidMinimumPoolStake\";\n    InvalidParamValueErrorCodes[InvalidParamValueErrorCodes[\"InvalidEpochDuration\"] = 4] = \"InvalidEpochDuration\";\n})(InvalidParamValueErrorCodes = exports.InvalidParamValueErrorCodes || (exports.InvalidParamValueErrorCodes = {}));\nvar InitializationErrorCodes;\n(function (InitializationErrorCodes) {\n    InitializationErrorCodes[InitializationErrorCodes[\"MixinSchedulerAlreadyInitialized\"] = 0] = \"MixinSchedulerAlreadyInitialized\";\n    InitializationErrorCodes[InitializationErrorCodes[\"MixinParamsAlreadyInitialized\"] = 1] = \"MixinParamsAlreadyInitialized\";\n})(InitializationErrorCodes = exports.InitializationErrorCodes || (exports.InitializationErrorCodes = {}));\nvar ExchangeManagerErrorCodes;\n(function (ExchangeManagerErrorCodes) {\n    ExchangeManagerErrorCodes[ExchangeManagerErrorCodes[\"ExchangeAlreadyRegistered\"] = 0] = \"ExchangeAlreadyRegistered\";\n    ExchangeManagerErrorCodes[ExchangeManagerErrorCodes[\"ExchangeNotRegistered\"] = 1] = \"ExchangeNotRegistered\";\n})(ExchangeManagerErrorCodes = exports.ExchangeManagerErrorCodes || (exports.ExchangeManagerErrorCodes = {}));\nclass OnlyCallableByExchangeError extends revert_error_1.RevertError {\n    constructor(senderAddress) {\n        super('OnlyCallableByExchangeError', 'OnlyCallableByExchangeError(address senderAddress)', { senderAddress });\n    }\n}\nexports.OnlyCallableByExchangeError = OnlyCallableByExchangeError;\nclass ExchangeManagerError extends revert_error_1.RevertError {\n    constructor(errorCode, senderAddress) {\n        super('ExchangeManagerError', 'ExchangeManagerError(uint8 errorCode, address senderAddress)', {\n            errorCode,\n            senderAddress,\n        });\n    }\n}\nexports.ExchangeManagerError = ExchangeManagerError;\nclass InsufficientBalanceError extends revert_error_1.RevertError {\n    constructor(amount, balance) {\n        super('InsufficientBalanceError', 'InsufficientBalanceError(uint256 amount, uint256 balance)', {\n            amount,\n            balance,\n        });\n    }\n}\nexports.InsufficientBalanceError = InsufficientBalanceError;\nclass OnlyCallableByPoolOperatorError extends revert_error_1.RevertError {\n    constructor(senderAddress, poolId) {\n        super('OnlyCallableByPoolOperatorError', 'OnlyCallableByPoolOperatorError(address senderAddress, bytes32 poolId)', { senderAddress, poolId });\n    }\n}\nexports.OnlyCallableByPoolOperatorError = OnlyCallableByPoolOperatorError;\nclass MakerPoolAssignmentError extends revert_error_1.RevertError {\n    constructor(error, makerAddress, poolId) {\n        super('MakerPoolAssignmentError', 'MakerPoolAssignmentError(uint8 error, address makerAddress, bytes32 poolId)', {\n            error,\n            makerAddress,\n            poolId,\n        });\n    }\n}\nexports.MakerPoolAssignmentError = MakerPoolAssignmentError;\nclass BlockTimestampTooLowError extends revert_error_1.RevertError {\n    constructor(epochEndTime, currentBlockTimestamp) {\n        super('BlockTimestampTooLowError', 'BlockTimestampTooLowError(uint256 epochEndTime, uint256 currentBlockTimestamp)', { epochEndTime, currentBlockTimestamp });\n    }\n}\nexports.BlockTimestampTooLowError = BlockTimestampTooLowError;\nclass OnlyCallableByStakingContractError extends revert_error_1.RevertError {\n    constructor(senderAddress) {\n        super('OnlyCallableByStakingContractError', 'OnlyCallableByStakingContractError(address senderAddress)', {\n            senderAddress,\n        });\n    }\n}\nexports.OnlyCallableByStakingContractError = OnlyCallableByStakingContractError;\nclass OnlyCallableIfInCatastrophicFailureError extends revert_error_1.RevertError {\n    constructor() {\n        super('OnlyCallableIfInCatastrophicFailureError', 'OnlyCallableIfInCatastrophicFailureError()', {});\n    }\n}\nexports.OnlyCallableIfInCatastrophicFailureError = OnlyCallableIfInCatastrophicFailureError;\nclass OnlyCallableIfNotInCatastrophicFailureError extends revert_error_1.RevertError {\n    constructor() {\n        super('OnlyCallableIfNotInCatastrophicFailureError', 'OnlyCallableIfNotInCatastrophicFailureError()', {});\n    }\n}\nexports.OnlyCallableIfNotInCatastrophicFailureError = OnlyCallableIfNotInCatastrophicFailureError;\nclass OperatorShareError extends revert_error_1.RevertError {\n    constructor(error, poolId, operatorShare) {\n        super('OperatorShareError', 'OperatorShareError(uint8 error, bytes32 poolId, uint32 operatorShare)', {\n            error,\n            poolId,\n            operatorShare,\n        });\n    }\n}\nexports.OperatorShareError = OperatorShareError;\nclass PoolExistenceError extends revert_error_1.RevertError {\n    constructor(poolId, alreadyExists) {\n        super('PoolExistenceError', 'PoolExistenceError(bytes32 poolId, bool alreadyExists)', {\n            poolId,\n            alreadyExists,\n        });\n    }\n}\nexports.PoolExistenceError = PoolExistenceError;\nclass InvalidParamValueError extends revert_error_1.RevertError {\n    constructor(error) {\n        super('InvalidParamValueError', 'InvalidParamValueError(uint8 error)', {\n            error,\n        });\n    }\n}\nexports.InvalidParamValueError = InvalidParamValueError;\nclass InvalidProtocolFeePaymentError extends revert_error_1.RevertError {\n    constructor(expectedProtocolFeePaid, actualProtocolFeePaid) {\n        super('InvalidProtocolFeePaymentError', 'InvalidProtocolFeePaymentError(uint256 expectedProtocolFeePaid, uint256 actualProtocolFeePaid)', { expectedProtocolFeePaid, actualProtocolFeePaid });\n    }\n}\nexports.InvalidProtocolFeePaymentError = InvalidProtocolFeePaymentError;\nclass InitializationError extends revert_error_1.RevertError {\n    constructor(error) {\n        super('InitializationError', 'InitializationError(uint8 error)', { error });\n    }\n}\nexports.InitializationError = InitializationError;\nclass ProxyDestinationCannotBeNilError extends revert_error_1.RevertError {\n    constructor() {\n        super('ProxyDestinationCannotBeNilError', 'ProxyDestinationCannotBeNilError()', {});\n    }\n}\nexports.ProxyDestinationCannotBeNilError = ProxyDestinationCannotBeNilError;\nclass PreviousEpochNotFinalizedError extends revert_error_1.RevertError {\n    constructor(closingEpoch, unfinalizedPoolsRemaining) {\n        super('PreviousEpochNotFinalizedError', 'PreviousEpochNotFinalizedError(uint256 closingEpoch, uint256 unfinalizedPoolsRemaining)', { closingEpoch, unfinalizedPoolsRemaining });\n    }\n}\nexports.PreviousEpochNotFinalizedError = PreviousEpochNotFinalizedError;\nclass PoolNotFinalizedError extends revert_error_1.RevertError {\n    constructor(poolId, epoch) {\n        super('PoolNotFinalizedError', 'PoolNotFinalizedError(bytes32 poolId, uint256 epoch)', { poolId, epoch });\n    }\n}\nexports.PoolNotFinalizedError = PoolNotFinalizedError;\nconst types = [\n    BlockTimestampTooLowError,\n    ExchangeManagerError,\n    InitializationError,\n    InsufficientBalanceError,\n    InvalidProtocolFeePaymentError,\n    InvalidParamValueError,\n    MakerPoolAssignmentError,\n    OnlyCallableByExchangeError,\n    OnlyCallableByPoolOperatorError,\n    OnlyCallableByStakingContractError,\n    OnlyCallableIfInCatastrophicFailureError,\n    OnlyCallableIfNotInCatastrophicFailureError,\n    OperatorShareError,\n    PoolExistenceError,\n    PreviousEpochNotFinalizedError,\n    ProxyDestinationCannotBeNilError,\n    PoolNotFinalizedError,\n];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=staking_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}