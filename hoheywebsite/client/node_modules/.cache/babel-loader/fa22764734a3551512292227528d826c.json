{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\n\nconst jsSHA3 = require(\"js-sha3\");\n\nconst _ = require(\"lodash\");\n\nconst random_1 = require(\"./random\");\n\nconst BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nconst SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nconst ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n  isChecksumAddress(address) {\n    // Check each case\n    const unprefixedAddress = address.replace('0x', '');\n    const addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n\n    for (let i = 0; i < ADDRESS_LENGTH; i++) {\n      // The nth letter should be uppercase if the nth digit of casemap is 1\n      const hexBase = 16;\n      const lowercaseRange = 7;\n\n      if (parseInt(addressHash[i], hexBase) > lowercaseRange && unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i] || parseInt(addressHash[i], hexBase) <= lowercaseRange && unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  isAddress(address) {\n    if (!BASIC_ADDRESS_REGEX.test(address)) {\n      // Check if it has the basic requirements of an address\n      return false;\n    } else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n      // If it's all small caps or all all caps, return true\n      return true;\n    } else {\n      // Otherwise check each case\n      const isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n      return isValidChecksummedAddress;\n    }\n  },\n\n  padZeros(address) {\n    return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n  },\n\n  generatePseudoRandomAddress() {\n    const randomBigNum = random_1.generatePseudoRandom256BitNumber();\n    const randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n    const addressLengthInBytes = 20;\n    const randomAddress = `0x${randomBuff.slice(0, addressLengthInBytes).toString('hex')}`;\n    return randomAddress;\n  }\n\n};","map":{"version":3,"sources":["../../src/address_utils.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,iBAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,MAAA,MAAA,GAAA,OAAA,CAAA,SAAA,CAAA;;AACA,MAAA,CAAA,GAAA,OAAA,CAAA,QAAA,CAAA;;AAEA,MAAA,QAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAEA,MAAM,mBAAmB,GAAG,sBAA5B;AACA,MAAM,uBAAuB,GAAG,oCAAhC;AACA,MAAM,cAAc,GAAG,EAAvB;AAEa,OAAA,CAAA,YAAA,GAAe;AACxB,EAAA,iBAAiB,CAAC,OAAD,EAAgB;AAC7B;AACA,UAAM,iBAAiB,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,EAAtB,CAA1B;AACA,UAAM,WAAW,GAAG,MAAM,CAAC,SAAP,CAAiB,iBAAiB,CAAC,WAAlB,EAAjB,CAApB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,cAApB,EAAoC,CAAC,EAArC,EAAyC;AACrC;AACA,YAAM,OAAO,GAAG,EAAhB;AACA,YAAM,cAAc,GAAG,CAAvB;;AACA,UACK,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,OAAjB,CAAR,GAAoC,cAApC,IACG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAD5D,IAEC,QAAQ,CAAC,WAAW,CAAC,CAAD,CAAZ,EAAiB,OAAjB,CAAR,IAAqC,cAArC,IACG,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,WAArB,OAAuC,iBAAiB,CAAC,CAAD,CAJhE,EAKE;AACE,eAAO,KAAP;AACH;AACJ;;AACD,WAAO,IAAP;AACH,GApBuB;;AAqBxB,EAAA,SAAS,CAAC,OAAD,EAAgB;AACrB,QAAI,CAAC,mBAAmB,CAAC,IAApB,CAAyB,OAAzB,CAAL,EAAwC;AACpC;AACA,aAAO,KAAP;AACH,KAHD,MAGO,IAAI,uBAAuB,CAAC,IAAxB,CAA6B,OAA7B,CAAJ,EAA2C;AAC9C;AACA,aAAO,IAAP;AACH,KAHM,MAGA;AACH;AACA,YAAM,yBAAyB,GAAG,OAAA,CAAA,YAAA,CAAa,iBAAb,CAA+B,OAA/B,CAAlC;AACA,aAAO,yBAAP;AACH;AACJ,GAjCuB;;AAkCxB,EAAA,QAAQ,CAAC,OAAD,EAAgB;AACpB,WAAO,iBAAA,CAAA,YAAA,CAAa,CAAC,CAAC,QAAF,CAAW,iBAAA,CAAA,cAAA,CAAe,OAAf,CAAX,EAAoC,cAApC,EAAoD,GAApD,CAAb,CAAP;AACH,GApCuB;;AAqCxB,EAAA,2BAA2B,GAAA;AACvB,UAAM,YAAY,GAAG,QAAA,CAAA,gCAAA,EAArB;AACA,UAAM,UAAU,GAAG,iBAAA,CAAA,IAAA,CAAK,YAAY,CAAC,QAAb,EAAL,CAAnB;AACA,UAAM,oBAAoB,GAAG,EAA7B;AACA,UAAM,aAAa,GAAG,KAAK,UAAU,CAAC,KAAX,CAAiB,CAAjB,EAAoB,oBAApB,EAA0C,QAA1C,CAAmD,KAAnD,CAAyD,EAApF;AACA,WAAO,aAAP;AACH;;AA3CuB,CAAf","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereumjs_util_1 = require(\"ethereumjs-util\");\nconst jsSHA3 = require(\"js-sha3\");\nconst _ = require(\"lodash\");\nconst random_1 = require(\"./random\");\nconst BASIC_ADDRESS_REGEX = /^(0x)?[0-9a-f]{40}$/i;\nconst SAME_CASE_ADDRESS_REGEX = /^(0x)?([0-9a-f]{40}|[0-9A-F]{40})$/;\nconst ADDRESS_LENGTH = 40;\nexports.addressUtils = {\n    isChecksumAddress(address) {\n        // Check each case\n        const unprefixedAddress = address.replace('0x', '');\n        const addressHash = jsSHA3.keccak256(unprefixedAddress.toLowerCase());\n        for (let i = 0; i < ADDRESS_LENGTH; i++) {\n            // The nth letter should be uppercase if the nth digit of casemap is 1\n            const hexBase = 16;\n            const lowercaseRange = 7;\n            if ((parseInt(addressHash[i], hexBase) > lowercaseRange &&\n                unprefixedAddress[i].toUpperCase() !== unprefixedAddress[i]) ||\n                (parseInt(addressHash[i], hexBase) <= lowercaseRange &&\n                    unprefixedAddress[i].toLowerCase() !== unprefixedAddress[i])) {\n                return false;\n            }\n        }\n        return true;\n    },\n    isAddress(address) {\n        if (!BASIC_ADDRESS_REGEX.test(address)) {\n            // Check if it has the basic requirements of an address\n            return false;\n        }\n        else if (SAME_CASE_ADDRESS_REGEX.test(address)) {\n            // If it's all small caps or all all caps, return true\n            return true;\n        }\n        else {\n            // Otherwise check each case\n            const isValidChecksummedAddress = exports.addressUtils.isChecksumAddress(address);\n            return isValidChecksummedAddress;\n        }\n    },\n    padZeros(address) {\n        return ethereumjs_util_1.addHexPrefix(_.padStart(ethereumjs_util_1.stripHexPrefix(address), ADDRESS_LENGTH, '0'));\n    },\n    generatePseudoRandomAddress() {\n        const randomBigNum = random_1.generatePseudoRandom256BitNumber();\n        const randomBuff = ethereumjs_util_1.sha3(randomBigNum.toString());\n        const addressLengthInBytes = 20;\n        const randomAddress = `0x${randomBuff.slice(0, addressLengthInBytes).toString('hex')}`;\n        return randomAddress;\n    },\n};\n//# sourceMappingURL=address_utils.js.map"]},"metadata":{},"sourceType":"module"}