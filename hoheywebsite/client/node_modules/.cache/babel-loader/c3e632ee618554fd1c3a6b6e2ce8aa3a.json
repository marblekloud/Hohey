{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethereum_types_1 = require(\"ethereum-types\");\n\nconst ethUtil = require(\"ethereumjs-util\");\n\nconst blob_1 = require(\"../abstract_data_types/types/blob\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nclass StringDataType extends blob_1.AbstractBlobDataType {\n  constructor(dataItem, dataTypeFactory) {\n    super(dataItem, dataTypeFactory, StringDataType._SIZE_KNOWN_AT_COMPILE_TIME);\n\n    if (!StringDataType.matchType(dataItem.type)) {\n      throw new Error(`Tried to instantiate String with bad input: ${dataItem}`);\n    }\n  }\n\n  static matchType(type) {\n    return type === ethereum_types_1.SolidityTypes.String;\n  } // Disable prefer-function-over-method for inherited abstract methods.\n\n  /* tslint:disable prefer-function-over-method */\n\n\n  encodeValue(value) {\n    // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n    // 1/3 Construct the value\n    const valueBuf = Buffer.from(value);\n    const valueLengthInBytes = valueBuf.byteLength;\n    const wordsToStoreValuePadded = Math.ceil(valueLengthInBytes / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    const bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;\n    const valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded); // 2/3 Construct the length\n\n    const lengthBuf = ethUtil.toBuffer(valueLengthInBytes);\n    const lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES); // 3/3 Combine length and value\n\n    const encodedValue = Buffer.concat([lengthBufPadded, valueBufPadded]);\n    return encodedValue;\n  }\n\n  decodeValue(calldata) {\n    // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n    // 1/2 Decode length\n    const lengthBufPadded = calldata.popWord();\n    const lengthHexPadded = ethUtil.bufferToHex(lengthBufPadded);\n    const length = parseInt(lengthHexPadded, constants_1.constants.HEX_BASE); // 2/2 Decode value\n\n    const wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    const valueBufPadded = calldata.popWords(wordsToStoreValuePadded);\n    const valueBuf = valueBufPadded.slice(0, length);\n    const value = valueBuf.toString('UTF-8');\n    return value;\n  }\n\n  getDefaultValue() {\n    return StringDataType._DEFAULT_VALUE;\n  }\n\n  getSignatureType() {\n    return ethereum_types_1.SolidityTypes.String;\n  }\n\n}\n\nStringDataType._SIZE_KNOWN_AT_COMPILE_TIME = false;\nStringDataType._DEFAULT_VALUE = '';\nexports.StringDataType = StringDataType;","map":{"version":3,"sources":["../../../../src/abi_encoder/evm_data_types/string.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,gBAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AACA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAIA,MAAA,MAAA,GAAA,OAAA,CAAA,mCAAA,CAAA;;AAEA,MAAA,WAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEA,MAAa,cAAb,SAAoC,MAAA,CAAA,oBAApC,CAAwD;AAQpD,EAAA,WAAA,CAAmB,QAAnB,EAAuC,eAAvC,EAAuE;AACnE,UAAM,QAAN,EAAgB,eAAhB,EAAiC,cAAc,CAAC,2BAAhD;;AACA,QAAI,CAAC,cAAc,CAAC,SAAf,CAAyB,QAAQ,CAAC,IAAlC,CAAL,EAA8C;AAC1C,YAAM,IAAI,KAAJ,CAAU,+CAA+C,QAAQ,EAAjE,CAAN;AACH;AACJ;;AATsB,SAAT,SAAS,CAAC,IAAD,EAAa;AAChC,WAAO,IAAI,KAAK,gBAAA,CAAA,aAAA,CAAc,MAA9B;AACH,GANmD,CAepD;;AACA;;;AACO,EAAA,WAAW,CAAC,KAAD,EAAc;AAC5B;AACA;AACA,UAAM,QAAQ,GAAG,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAjB;AACA,UAAM,kBAAkB,GAAG,QAAQ,CAAC,UAApC;AACA,UAAM,uBAAuB,GAAG,IAAI,CAAC,IAAL,CAAU,kBAAkB,GAAG,WAAA,CAAA,SAAA,CAAU,uBAAzC,CAAhC;AACA,UAAM,uBAAuB,GAAG,uBAAuB,GAAG,WAAA,CAAA,SAAA,CAAU,uBAApE;AACA,UAAM,cAAc,GAAG,OAAO,CAAC,cAAR,CAAuB,QAAvB,EAAiC,uBAAjC,CAAvB,CAP4B,CAQ5B;;AACA,UAAM,SAAS,GAAG,OAAO,CAAC,QAAR,CAAiB,kBAAjB,CAAlB;AACA,UAAM,eAAe,GAAG,OAAO,CAAC,aAAR,CAAsB,SAAtB,EAAiC,WAAA,CAAA,SAAA,CAAU,uBAA3C,CAAxB,CAV4B,CAW5B;;AACA,UAAM,YAAY,GAAG,MAAM,CAAC,MAAP,CAAc,CAAC,eAAD,EAAkB,cAAlB,CAAd,CAArB;AACA,WAAO,YAAP;AACH;;AAEM,EAAA,WAAW,CAAC,QAAD,EAAsB;AACpC;AACA;AACA,UAAM,eAAe,GAAG,QAAQ,CAAC,OAAT,EAAxB;AACA,UAAM,eAAe,GAAG,OAAO,CAAC,WAAR,CAAoB,eAApB,CAAxB;AACA,UAAM,MAAM,GAAG,QAAQ,CAAC,eAAD,EAAkB,WAAA,CAAA,SAAA,CAAU,QAA5B,CAAvB,CALoC,CAMpC;;AACA,UAAM,uBAAuB,GAAG,IAAI,CAAC,IAAL,CAAU,MAAM,GAAG,WAAA,CAAA,SAAA,CAAU,uBAA7B,CAAhC;AACA,UAAM,cAAc,GAAG,QAAQ,CAAC,QAAT,CAAkB,uBAAlB,CAAvB;AACA,UAAM,QAAQ,GAAG,cAAc,CAAC,KAAf,CAAqB,CAArB,EAAwB,MAAxB,CAAjB;AACA,UAAM,KAAK,GAAG,QAAQ,CAAC,QAAT,CAAkB,OAAlB,CAAd;AACA,WAAO,KAAP;AACH;;AAEM,EAAA,eAAe,GAAA;AAClB,WAAO,cAAc,CAAC,cAAtB;AACH;;AAEM,EAAA,gBAAgB,GAAA;AACnB,WAAO,gBAAA,CAAA,aAAA,CAAc,MAArB;AACH;;AArDmD;;AAC5B,cAAA,CAAA,2BAAA,GAAuC,KAAvC;AACA,cAAA,CAAA,cAAA,GAAiB,EAAjB;AAF5B,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethereum_types_1 = require(\"ethereum-types\");\nconst ethUtil = require(\"ethereumjs-util\");\nconst blob_1 = require(\"../abstract_data_types/types/blob\");\nconst constants_1 = require(\"../utils/constants\");\nclass StringDataType extends blob_1.AbstractBlobDataType {\n    constructor(dataItem, dataTypeFactory) {\n        super(dataItem, dataTypeFactory, StringDataType._SIZE_KNOWN_AT_COMPILE_TIME);\n        if (!StringDataType.matchType(dataItem.type)) {\n            throw new Error(`Tried to instantiate String with bad input: ${dataItem}`);\n        }\n    }\n    static matchType(type) {\n        return type === ethereum_types_1.SolidityTypes.String;\n    }\n    // Disable prefer-function-over-method for inherited abstract methods.\n    /* tslint:disable prefer-function-over-method */\n    encodeValue(value) {\n        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n        // 1/3 Construct the value\n        const valueBuf = Buffer.from(value);\n        const valueLengthInBytes = valueBuf.byteLength;\n        const wordsToStoreValuePadded = Math.ceil(valueLengthInBytes / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        const bytesToStoreValuePadded = wordsToStoreValuePadded * constants_1.constants.EVM_WORD_WIDTH_IN_BYTES;\n        const valueBufPadded = ethUtil.setLengthRight(valueBuf, bytesToStoreValuePadded);\n        // 2/3 Construct the length\n        const lengthBuf = ethUtil.toBuffer(valueLengthInBytes);\n        const lengthBufPadded = ethUtil.setLengthLeft(lengthBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        // 3/3 Combine length and value\n        const encodedValue = Buffer.concat([lengthBufPadded, valueBufPadded]);\n        return encodedValue;\n    }\n    decodeValue(calldata) {\n        // Encoded value is of the form: <length><value>, with each field padded to be word-aligned.\n        // 1/2 Decode length\n        const lengthBufPadded = calldata.popWord();\n        const lengthHexPadded = ethUtil.bufferToHex(lengthBufPadded);\n        const length = parseInt(lengthHexPadded, constants_1.constants.HEX_BASE);\n        // 2/2 Decode value\n        const wordsToStoreValuePadded = Math.ceil(length / constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        const valueBufPadded = calldata.popWords(wordsToStoreValuePadded);\n        const valueBuf = valueBufPadded.slice(0, length);\n        const value = valueBuf.toString('UTF-8');\n        return value;\n    }\n    getDefaultValue() {\n        return StringDataType._DEFAULT_VALUE;\n    }\n    getSignatureType() {\n        return ethereum_types_1.SolidityTypes.String;\n    }\n}\nStringDataType._SIZE_KNOWN_AT_COMPILE_TIME = false;\nStringDataType._DEFAULT_VALUE = '';\nexports.StringDataType = StringDataType;\n//# sourceMappingURL=string.js.map"]},"metadata":{},"sourceType":"module"}