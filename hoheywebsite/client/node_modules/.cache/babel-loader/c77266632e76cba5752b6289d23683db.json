{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nvar BinOpErrorCodes;\n\n(function (BinOpErrorCodes) {\n  BinOpErrorCodes[BinOpErrorCodes[\"AdditionOverflow\"] = 0] = \"AdditionOverflow\";\n  BinOpErrorCodes[BinOpErrorCodes[\"MultiplicationOverflow\"] = 1] = \"MultiplicationOverflow\";\n  BinOpErrorCodes[BinOpErrorCodes[\"SubtractionUnderflow\"] = 2] = \"SubtractionUnderflow\";\n  BinOpErrorCodes[BinOpErrorCodes[\"DivisionByZero\"] = 3] = \"DivisionByZero\";\n})(BinOpErrorCodes = exports.BinOpErrorCodes || (exports.BinOpErrorCodes = {}));\n\nvar DowncastErrorCodes;\n\n(function (DowncastErrorCodes) {\n  DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint32\"] = 0] = \"ValueTooLargeToDowncastToUint32\";\n  DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint64\"] = 1] = \"ValueTooLargeToDowncastToUint64\";\n  DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint96\"] = 2] = \"ValueTooLargeToDowncastToUint96\";\n  DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint128\"] = 3] = \"ValueTooLargeToDowncastToUint128\";\n})(DowncastErrorCodes = exports.DowncastErrorCodes || (exports.DowncastErrorCodes = {}));\n\nclass Uint256BinOpError extends revert_error_1.RevertError {\n  constructor(error, a, b) {\n    super('Uint256BinOpError', 'Uint256BinOpError(uint8 error, uint256 a, uint256 b)', {\n      error,\n      a,\n      b\n    });\n  }\n\n}\n\nexports.Uint256BinOpError = Uint256BinOpError;\n\nclass Uint96BinOpError extends revert_error_1.RevertError {\n  constructor(error, a, b) {\n    super('Uint96BinOpError', 'Uint96BinOpError(uint8 error, uint96 a, uint96 b)', {\n      error,\n      a,\n      b\n    });\n  }\n\n}\n\nexports.Uint96BinOpError = Uint96BinOpError;\n\nclass Uint64BinOpError extends revert_error_1.RevertError {\n  constructor(error, a, b) {\n    super('Uint64BinOpError', 'Uint64BinOpError(uint8 error, uint64 a, uint64 b)', {\n      error,\n      a,\n      b\n    });\n  }\n\n}\n\nexports.Uint64BinOpError = Uint64BinOpError;\n\nclass Uint256DowncastError extends revert_error_1.RevertError {\n  constructor(error, a) {\n    super('Uint256DowncastError', 'Uint256DowncastError(uint8 error, uint256 a)', {\n      error,\n      a\n    });\n  }\n\n}\n\nexports.Uint256DowncastError = Uint256DowncastError;\nconst types = [Uint256BinOpError, Uint96BinOpError, Uint64BinOpError, Uint256DowncastError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/utils/safe_math_revert_errors.ts"],"names":[],"mappings":";;;;;;AACA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAEA;;;AAEA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACvB,EAAA,eAAA,CAAA,eAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,wBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,wBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,sBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,sBAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,gBAAA,CAAA,GAAA,CAAA,CAAA,GAAA,gBAAA;AACH,CALD,EAAY,eAAe,GAAf,OAAA,CAAA,eAAA,KAAA,OAAA,CAAA,eAAA,GAAe,EAAf,CAAZ;;AAOA,IAAY,kBAAZ;;AAAA,CAAA,UAAY,kBAAZ,EAA8B;AAC1B,EAAA,kBAAA,CAAA,kBAAA,CAAA,iCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iCAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,iCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iCAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,iCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,iCAAA;AACA,EAAA,kBAAA,CAAA,kBAAA,CAAA,kCAAA,CAAA,GAAA,CAAA,CAAA,GAAA,kCAAA;AACH,CALD,EAAY,kBAAkB,GAAlB,OAAA,CAAA,kBAAA,KAAA,OAAA,CAAA,kBAAA,GAAkB,EAAlB,CAAZ;;AAOA,MAAa,iBAAb,SAAuC,cAAA,CAAA,WAAvC,CAAkD;AAC9C,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAoD,CAApD,EAAiE;AAC7D,UAAM,mBAAN,EAA2B,sDAA3B,EAAmF;AAC/E,MAAA,KAD+E;AAE/E,MAAA,CAF+E;AAG/E,MAAA;AAH+E,KAAnF;AAKH;;AAP6C;;AAAlD,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAUA,MAAa,gBAAb,SAAsC,cAAA,CAAA,WAAtC,CAAiD;AAC7C,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAoD,CAApD,EAAiE;AAC7D,UAAM,kBAAN,EAA0B,mDAA1B,EAA+E;AAC3E,MAAA,KAD2E;AAE3E,MAAA,CAF2E;AAG3E,MAAA;AAH2E,KAA/E;AAKH;;AAP4C;;AAAjD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAUA,MAAa,gBAAb,SAAsC,cAAA,CAAA,WAAtC,CAAiD;AAC7C,EAAA,WAAA,CAAY,KAAZ,EAAqC,CAArC,EAAoD,CAApD,EAAiE;AAC7D,UAAM,kBAAN,EAA0B,mDAA1B,EAA+E;AAC3E,MAAA,KAD2E;AAE3E,MAAA,CAF2E;AAG3E,MAAA;AAH2E,KAA/E;AAKH;;AAP4C;;AAAjD,OAAA,CAAA,gBAAA,GAAA,gBAAA;;AAUA,MAAa,oBAAb,SAA0C,cAAA,CAAA,WAA1C,CAAqD;AACjD,EAAA,WAAA,CAAY,KAAZ,EAAwC,CAAxC,EAAqD;AACjD,UAAM,sBAAN,EAA8B,8CAA9B,EAA8E;AAC1E,MAAA,KAD0E;AAE1E,MAAA;AAF0E,KAA9E;AAIH;;AANgD;;AAArD,OAAA,CAAA,oBAAA,GAAA,oBAAA;AASA,MAAM,KAAK,GAAG,CAAC,iBAAD,EAAoB,gBAApB,EAAsC,gBAAtC,EAAwD,oBAAxD,CAAd,C,CAEA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nvar BinOpErrorCodes;\n(function (BinOpErrorCodes) {\n    BinOpErrorCodes[BinOpErrorCodes[\"AdditionOverflow\"] = 0] = \"AdditionOverflow\";\n    BinOpErrorCodes[BinOpErrorCodes[\"MultiplicationOverflow\"] = 1] = \"MultiplicationOverflow\";\n    BinOpErrorCodes[BinOpErrorCodes[\"SubtractionUnderflow\"] = 2] = \"SubtractionUnderflow\";\n    BinOpErrorCodes[BinOpErrorCodes[\"DivisionByZero\"] = 3] = \"DivisionByZero\";\n})(BinOpErrorCodes = exports.BinOpErrorCodes || (exports.BinOpErrorCodes = {}));\nvar DowncastErrorCodes;\n(function (DowncastErrorCodes) {\n    DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint32\"] = 0] = \"ValueTooLargeToDowncastToUint32\";\n    DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint64\"] = 1] = \"ValueTooLargeToDowncastToUint64\";\n    DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint96\"] = 2] = \"ValueTooLargeToDowncastToUint96\";\n    DowncastErrorCodes[DowncastErrorCodes[\"ValueTooLargeToDowncastToUint128\"] = 3] = \"ValueTooLargeToDowncastToUint128\";\n})(DowncastErrorCodes = exports.DowncastErrorCodes || (exports.DowncastErrorCodes = {}));\nclass Uint256BinOpError extends revert_error_1.RevertError {\n    constructor(error, a, b) {\n        super('Uint256BinOpError', 'Uint256BinOpError(uint8 error, uint256 a, uint256 b)', {\n            error,\n            a,\n            b,\n        });\n    }\n}\nexports.Uint256BinOpError = Uint256BinOpError;\nclass Uint96BinOpError extends revert_error_1.RevertError {\n    constructor(error, a, b) {\n        super('Uint96BinOpError', 'Uint96BinOpError(uint8 error, uint96 a, uint96 b)', {\n            error,\n            a,\n            b,\n        });\n    }\n}\nexports.Uint96BinOpError = Uint96BinOpError;\nclass Uint64BinOpError extends revert_error_1.RevertError {\n    constructor(error, a, b) {\n        super('Uint64BinOpError', 'Uint64BinOpError(uint8 error, uint64 a, uint64 b)', {\n            error,\n            a,\n            b,\n        });\n    }\n}\nexports.Uint64BinOpError = Uint64BinOpError;\nclass Uint256DowncastError extends revert_error_1.RevertError {\n    constructor(error, a) {\n        super('Uint256DowncastError', 'Uint256DowncastError(uint8 error, uint256 a)', {\n            error,\n            a,\n        });\n    }\n}\nexports.Uint256DowncastError = Uint256DowncastError;\nconst types = [Uint256BinOpError, Uint96BinOpError, Uint64BinOpError, Uint256DowncastError];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=safe_math_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}