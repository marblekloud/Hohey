{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"@0x/utils\");\n/**\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\n * This one has an async/await `emitPayloadAsync` and also defined types.\n */\n\n\nclass Subprovider {\n  static _createFinalPayload(payload) {\n    const finalPayload = Object.assign({\n      // defaults\n      id: Subprovider._getRandomId(),\n      jsonrpc: '2.0',\n      params: []\n    }, payload);\n    return finalPayload;\n  } // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\n\n\n  static _getRandomId() {\n    const extraDigits = 3;\n    const baseTen = 10; // 13 time digits\n\n    const datePart = new Date().getTime() * Math.pow(baseTen, extraDigits); // 3 random digits\n\n    const extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits)); // 16 digits\n\n    return datePart + extraPart;\n  }\n  /**\n   * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\n   * this subprovider is a part of. The payload will cascade down the subprovider middleware\n   * stack until finding the responsible entity for handling the request.\n   * @param payload JSON RPC payload\n   * @returns JSON RPC response payload\n   */\n\n\n  emitPayloadAsync(payload) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const finalPayload = Subprovider._createFinalPayload(payload); // Promisify does the binding internally and `this` is supplied as a second argument\n      // tslint:disable-next-line:no-unbound-method\n\n\n      const response = yield utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload);\n      return response;\n    });\n  }\n  /**\n   * Set's the subprovider's engine to the ProviderEngine it is added to.\n   * This is only called within the ProviderEngine source code, do not call\n   * directly.\n   * @param engine The ProviderEngine this subprovider is added to\n   */\n\n\n  setEngine(engine) {\n    this.engine = engine;\n  }\n\n}\n\nexports.Subprovider = Subprovider;","map":{"version":3,"sources":["../../../src/subproviders/subprovider.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,WAAA,CAAA;AAKA;;;AAGG;;;AACH,MAAsB,WAAtB,CAAiC;AAGO,SAAnB,mBAAmB,CAChC,OADgC,EACiB;AAEjD,UAAM,YAAY,GAAA,MAAA,CAAA,MAAA,CAAA;AACd;AACA,MAAA,EAAE,EAAE,WAAW,CAAC,YAAZ,EAFU;AAGd,MAAA,OAAO,EAAE,KAHK;AAId,MAAA,MAAM,EAAE;AAJM,KAAA,EAKX,OALW,CAAlB;AAOA,WAAO,YAAP;AACH,GAd4B,CAe7B;;;AAC2B,SAAZ,YAAY,GAAA;AACvB,UAAM,WAAW,GAAG,CAApB;AACA,UAAM,OAAO,GAAG,EAAhB,CAFuB,CAGvB;;AACA,UAAM,QAAQ,GAAG,IAAI,IAAJ,GAAW,OAAX,KAAuB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAAxC,CAJuB,CAKvB;;AACA,UAAM,SAAS,GAAG,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAlB,CAA3B,CAAlB,CANuB,CAOvB;;AACA,WAAO,QAAQ,GAAG,SAAlB;AACH;AAaD;;;;;;AAMG;;;AACU,EAAA,gBAAgB,CAAC,OAAD,EAAkD;;AAC3E,YAAM,YAAY,GAAG,WAAW,CAAC,mBAAZ,CAAgC,OAAhC,CAArB,C,CACA;AACA;;;AACA,YAAM,QAAQ,GAAG,MAAM,OAAA,CAAA,SAAA,CAAkC,KAAK,MAAL,CAAY,SAA9C,EAAyD,KAAK,MAA9D,EAAsE,YAAtE,CAAvB;AACA,aAAO,QAAP;AACH,K;AAAA;AACD;;;;;AAKG;;;AACI,EAAA,SAAS,CAAC,MAAD,EAA2B;AACvC,SAAK,MAAL,GAAc,MAAd;AACH;;AA5D4B;;AAAjC,OAAA,CAAA,WAAA,GAAA,WAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"@0x/utils\");\n/**\n * A altered version of the base class Subprovider found in [web3-provider-engine](https://github.com/MetaMask/provider-engine).\n * This one has an async/await `emitPayloadAsync` and also defined types.\n */\nclass Subprovider {\n    static _createFinalPayload(payload) {\n        const finalPayload = Object.assign({ \n            // defaults\n            id: Subprovider._getRandomId(), jsonrpc: '2.0', params: [] }, payload);\n        return finalPayload;\n    }\n    // Ported from: https://github.com/MetaMask/provider-engine/blob/master/util/random-id.js\n    static _getRandomId() {\n        const extraDigits = 3;\n        const baseTen = 10;\n        // 13 time digits\n        const datePart = new Date().getTime() * Math.pow(baseTen, extraDigits);\n        // 3 random digits\n        const extraPart = Math.floor(Math.random() * Math.pow(baseTen, extraDigits));\n        // 16 digits\n        return datePart + extraPart;\n    }\n    /**\n     * Emits a JSON RPC payload that will then be handled by the ProviderEngine instance\n     * this subprovider is a part of. The payload will cascade down the subprovider middleware\n     * stack until finding the responsible entity for handling the request.\n     * @param payload JSON RPC payload\n     * @returns JSON RPC response payload\n     */\n    emitPayloadAsync(payload) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const finalPayload = Subprovider._createFinalPayload(payload);\n            // Promisify does the binding internally and `this` is supplied as a second argument\n            // tslint:disable-next-line:no-unbound-method\n            const response = yield utils_1.promisify(this.engine.sendAsync, this.engine)(finalPayload);\n            return response;\n        });\n    }\n    /**\n     * Set's the subprovider's engine to the ProviderEngine it is added to.\n     * This is only called within the ProviderEngine source code, do not call\n     * directly.\n     * @param engine The ProviderEngine this subprovider is added to\n     */\n    setEngine(engine) {\n        this.engine = engine;\n    }\n}\nexports.Subprovider = Subprovider;\n//# sourceMappingURL=subprovider.js.map"]},"metadata":{},"sourceType":"module"}