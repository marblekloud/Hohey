{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst ethUtil = require(\"ethereumjs-util\");\n\nconst constants_1 = require(\"../../utils/constants\");\n\nconst calldata_block_1 = require(\"../calldata_block\");\n\nclass PointerCalldataBlock extends calldata_block_1.CalldataBlock {\n  constructor(name, signature, parentName, dependency, parent) {\n    const headerSizeInBytes = PointerCalldataBlock._EMPTY_HEADER_SIZE;\n    const bodySizeInBytes = PointerCalldataBlock._DEPENDENT_PAYLOAD_SIZE_IN_BYTES;\n    super(name, signature, parentName, headerSizeInBytes, bodySizeInBytes);\n    this._parent = parent;\n    this._dependency = dependency;\n    this._aliasFor = undefined;\n  }\n\n  toBuffer() {\n    const destinationOffset = this._aliasFor !== undefined ? this._aliasFor.getOffsetInBytes() : this._dependency.getOffsetInBytes();\n\n    const parentOffset = this._parent.getOffsetInBytes();\n\n    const parentHeaderSize = this._parent.getHeaderSizeInBytes();\n\n    const pointer = destinationOffset - (parentOffset + parentHeaderSize);\n    const pointerHex = `0x${pointer.toString(constants_1.constants.HEX_BASE)}`;\n    const pointerBuf = ethUtil.toBuffer(pointerHex);\n    const pointerBufPadded = ethUtil.setLengthLeft(pointerBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n    return pointerBufPadded;\n  }\n\n  getDependency() {\n    return this._dependency;\n  }\n\n  setAlias(block) {\n    this._aliasFor = block;\n\n    this._setName(`${this.getName()} (alias for ${block.getName()})`);\n  }\n\n  getAlias() {\n    return this._aliasFor;\n  }\n\n  getRawData() {\n    const dependencyRawData = this._dependency.getRawData();\n\n    const rawDataComponents = [];\n    rawDataComponents.push(PointerCalldataBlock.RAW_DATA_START);\n    rawDataComponents.push(dependencyRawData);\n    rawDataComponents.push(PointerCalldataBlock.RAW_DATA_END);\n    const rawData = Buffer.concat(rawDataComponents);\n    return rawData;\n  }\n\n}\n\nPointerCalldataBlock.RAW_DATA_START = Buffer.from('<');\nPointerCalldataBlock.RAW_DATA_END = Buffer.from('>');\nPointerCalldataBlock._DEPENDENT_PAYLOAD_SIZE_IN_BYTES = 32;\nPointerCalldataBlock._EMPTY_HEADER_SIZE = 0;\nexports.PointerCalldataBlock = PointerCalldataBlock;","map":{"version":3,"sources":["../../../../../src/abi_encoder/calldata/blocks/pointer.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,OAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AAGA,MAAA,WAAA,GAAA,OAAA,CAAA,uBAAA,CAAA;;AAEA,MAAA,gBAAA,GAAA,OAAA,CAAA,mBAAA,CAAA;;AAEA,MAAa,oBAAb,SAA0C,gBAAA,CAAA,aAA1C,CAAuD;AASnD,EAAA,WAAA,CAAY,IAAZ,EAA0B,SAA1B,EAA6C,UAA7C,EAAiE,UAAjE,EAA4F,MAA5F,EAAiH;AAC7G,UAAM,iBAAiB,GAAG,oBAAoB,CAAC,kBAA/C;AACA,UAAM,eAAe,GAAG,oBAAoB,CAAC,gCAA7C;AACA,UAAM,IAAN,EAAY,SAAZ,EAAuB,UAAvB,EAAmC,iBAAnC,EAAsD,eAAtD;AACA,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,WAAL,GAAmB,UAAnB;AACA,SAAK,SAAL,GAAiB,SAAjB;AACH;;AAEM,EAAA,QAAQ,GAAA;AACX,UAAM,iBAAiB,GACnB,KAAK,SAAL,KAAmB,SAAnB,GAA+B,KAAK,SAAL,CAAe,gBAAf,EAA/B,GAAmE,KAAK,WAAL,CAAiB,gBAAjB,EADvE;;AAEA,UAAM,YAAY,GAAG,KAAK,OAAL,CAAa,gBAAb,EAArB;;AACA,UAAM,gBAAgB,GAAG,KAAK,OAAL,CAAa,oBAAb,EAAzB;;AACA,UAAM,OAAO,GAAW,iBAAiB,IAAI,YAAY,GAAG,gBAAnB,CAAzC;AACA,UAAM,UAAU,GAAG,KAAK,OAAO,CAAC,QAAR,CAAiB,WAAA,CAAA,SAAA,CAAU,QAA3B,CAAoC,EAA5D;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,QAAR,CAAiB,UAAjB,CAAnB;AACA,UAAM,gBAAgB,GAAG,OAAO,CAAC,aAAR,CAAsB,UAAtB,EAAkC,WAAA,CAAA,SAAA,CAAU,uBAA5C,CAAzB;AACA,WAAO,gBAAP;AACH;;AAEM,EAAA,aAAa,GAAA;AAChB,WAAO,KAAK,WAAZ;AACH;;AAEM,EAAA,QAAQ,CAAC,KAAD,EAAqB;AAChC,SAAK,SAAL,GAAiB,KAAjB;;AACA,SAAK,QAAL,CAAc,GAAG,KAAK,OAAL,EAAc,eAAe,KAAK,CAAC,OAAN,EAAe,GAA7D;AACH;;AAEM,EAAA,QAAQ,GAAA;AACX,WAAO,KAAK,SAAZ;AACH;;AAEM,EAAA,UAAU,GAAA;AACb,UAAM,iBAAiB,GAAG,KAAK,WAAL,CAAiB,UAAjB,EAA1B;;AACA,UAAM,iBAAiB,GAAa,EAApC;AACA,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,oBAAoB,CAAC,cAA5C;AACA,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,iBAAvB;AACA,IAAA,iBAAiB,CAAC,IAAlB,CAAuB,oBAAoB,CAAC,YAA5C;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,MAAP,CAAc,iBAAd,CAAhB;AACA,WAAO,OAAP;AACH;;AAnDkD;;AAC5B,oBAAA,CAAA,cAAA,GAAiB,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAjB;AACA,oBAAA,CAAA,YAAA,GAAe,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAf;AACC,oBAAA,CAAA,gCAAA,GAAmC,EAAnC;AACA,oBAAA,CAAA,kBAAA,GAAqB,CAArB;AAJ5B,OAAA,CAAA,oBAAA,GAAA,oBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst ethUtil = require(\"ethereumjs-util\");\nconst constants_1 = require(\"../../utils/constants\");\nconst calldata_block_1 = require(\"../calldata_block\");\nclass PointerCalldataBlock extends calldata_block_1.CalldataBlock {\n    constructor(name, signature, parentName, dependency, parent) {\n        const headerSizeInBytes = PointerCalldataBlock._EMPTY_HEADER_SIZE;\n        const bodySizeInBytes = PointerCalldataBlock._DEPENDENT_PAYLOAD_SIZE_IN_BYTES;\n        super(name, signature, parentName, headerSizeInBytes, bodySizeInBytes);\n        this._parent = parent;\n        this._dependency = dependency;\n        this._aliasFor = undefined;\n    }\n    toBuffer() {\n        const destinationOffset = this._aliasFor !== undefined ? this._aliasFor.getOffsetInBytes() : this._dependency.getOffsetInBytes();\n        const parentOffset = this._parent.getOffsetInBytes();\n        const parentHeaderSize = this._parent.getHeaderSizeInBytes();\n        const pointer = destinationOffset - (parentOffset + parentHeaderSize);\n        const pointerHex = `0x${pointer.toString(constants_1.constants.HEX_BASE)}`;\n        const pointerBuf = ethUtil.toBuffer(pointerHex);\n        const pointerBufPadded = ethUtil.setLengthLeft(pointerBuf, constants_1.constants.EVM_WORD_WIDTH_IN_BYTES);\n        return pointerBufPadded;\n    }\n    getDependency() {\n        return this._dependency;\n    }\n    setAlias(block) {\n        this._aliasFor = block;\n        this._setName(`${this.getName()} (alias for ${block.getName()})`);\n    }\n    getAlias() {\n        return this._aliasFor;\n    }\n    getRawData() {\n        const dependencyRawData = this._dependency.getRawData();\n        const rawDataComponents = [];\n        rawDataComponents.push(PointerCalldataBlock.RAW_DATA_START);\n        rawDataComponents.push(dependencyRawData);\n        rawDataComponents.push(PointerCalldataBlock.RAW_DATA_END);\n        const rawData = Buffer.concat(rawDataComponents);\n        return rawData;\n    }\n}\nPointerCalldataBlock.RAW_DATA_START = Buffer.from('<');\nPointerCalldataBlock.RAW_DATA_END = Buffer.from('>');\nPointerCalldataBlock._DEPENDENT_PAYLOAD_SIZE_IN_BYTES = 32;\nPointerCalldataBlock._EMPTY_HEADER_SIZE = 0;\nexports.PointerCalldataBlock = PointerCalldataBlock;\n//# sourceMappingURL=pointer.js.map"]},"metadata":{},"sourceType":"module"}