{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst revert_error_1 = require(\"../../revert_error\"); // tslint:disable:max-classes-per-file\n\n\nclass SpenderERC20TransferFromFailedError extends revert_error_1.RevertError {\n  constructor(token, owner, to, amount, errorData) {\n    super('SpenderERC20TransferFromFailedError', 'SpenderERC20TransferFromFailedError(address token, address owner, address to, uint256 amount, bytes errorData)', {\n      token,\n      owner,\n      to,\n      amount,\n      errorData\n    });\n  }\n\n}\n\nexports.SpenderERC20TransferFromFailedError = SpenderERC20TransferFromFailedError;\nconst types = [SpenderERC20TransferFromFailedError]; // Register the types we've defined.\n\nfor (const type of types) {\n  revert_error_1.RevertError.registerType(type);\n}","map":{"version":3,"sources":["../../../../src/revert_errors/zero-ex/spender_revert_errors.ts"],"names":[],"mappings":";;;;;;AAAA,MAAA,cAAA,GAAA,OAAA,CAAA,oBAAA,CAAA,C,CAGA;;;AACA,MAAa,mCAAb,SAAyD,cAAA,CAAA,WAAzD,CAAoE;AAChE,EAAA,WAAA,CAAY,KAAZ,EAA4B,KAA5B,EAA4C,EAA5C,EAAyD,MAAzD,EAA6E,SAA7E,EAA+F;AAC3F,UACI,qCADJ,EAEI,gHAFJ,EAGI;AACI,MAAA,KADJ;AAEI,MAAA,KAFJ;AAGI,MAAA,EAHJ;AAII,MAAA,MAJJ;AAKI,MAAA;AALJ,KAHJ;AAWH;;AAb+D;;AAApE,OAAA,CAAA,mCAAA,GAAA,mCAAA;AAgBA,MAAM,KAAK,GAAG,CAAC,mCAAD,CAAd,C,CAEA;;AACA,KAAK,MAAM,IAAX,IAAmB,KAAnB,EAA0B;AACtB,EAAA,cAAA,CAAA,WAAA,CAAY,YAAZ,CAAyB,IAAzB;AACH","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst revert_error_1 = require(\"../../revert_error\");\n// tslint:disable:max-classes-per-file\nclass SpenderERC20TransferFromFailedError extends revert_error_1.RevertError {\n    constructor(token, owner, to, amount, errorData) {\n        super('SpenderERC20TransferFromFailedError', 'SpenderERC20TransferFromFailedError(address token, address owner, address to, uint256 amount, bytes errorData)', {\n            token,\n            owner,\n            to,\n            amount,\n            errorData,\n        });\n    }\n}\nexports.SpenderERC20TransferFromFailedError = SpenderERC20TransferFromFailedError;\nconst types = [SpenderERC20TransferFromFailedError];\n// Register the types we've defined.\nfor (const type of types) {\n    revert_error_1.RevertError.registerType(type);\n}\n//# sourceMappingURL=spender_revert_errors.js.map"]},"metadata":{},"sourceType":"module"}